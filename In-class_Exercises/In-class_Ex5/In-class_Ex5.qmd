---
title: "In-class_Ex5"
author: "Low Ji Xiong"
---


## Overview

Hands-on experience on the following tasks: - performing geocoding using data downloaded from data.gov.sg - calibrating Geographically Weighted Poisson Regression

## Getting Started

```{R}
devtools::install_github("LukeCe/spflow")
```

The code chunks below installs and launches these R packages into R environment.

```{R}
pacman::p_load(sf, spdep, sp, Matrix, spflow, reshape2, knitr, tmap, tidyverse)
```

## Data Preparation

Before we can calibrate Spatial Econometric Interaction Models by using **spflow** package, 3 data sets are required.

- a spatial weights,
- a tiblle data.frame consists of the origins, destination, flows and distances between the origins and destination, and
- a tibble data.frame consists of explanatory variables

## Building the geographical area

For the purpose of this study, MPSZ-2019 from URA will be used, which will be imported as follows.

```{R}
mpsz <- st_read(dsn = "data/geospatial", layer = "MPSZ-2019")%>%
  st_transform(crs = 3414)
```

Import BusStop layer downloaded from LTA DataMall into RStudio and save it as a sf data frame called busstop.

```{r}
busstop <- st_read(dsn = "data/geospatial",
                   layer = "BusStop") %>%
  st_transform(crs = 3414)
```

Populate the planning subzone code (i.e. SUBZONE_C) of mpsz sf data frame into busstop sf data frame as follows.

```{R}
busstop_mpsz <- st_intersection(busstop, mpsz) %>%
  select(BUS_STOP_N, SUBZONE_C) %>%
  st_drop_geometry()
```

Analysis will be focused on planning SZ with BS. In view of this the Point-in-polygon count analysis is used.

```{R}
mpsz$'BUSSTOP_COUNT' <- lengths(
  st_intersects(mpsz, busstop))
```

Preparing the flow data 

```{R}
odbus6_9 <- read_rds("data/rds/odbus6_9.rds")
```

```{R}
od_data <- left_join(odbus6_9, busstop_mpsz, by = c("ORIGIN_PT_CODE" = "BUS_STOP_N"))%>%
  rename(ORIGIN_BS = ORIGIN_PT_CODE, 
         ORIGIN_SZ = SUBZONE_C,
         DESTIN_BS = DESTINATION_PT_CODE)
```

retrieve the rds data

```{R}
mpsz_nb <- read_rds("data/rds/mpsz_nb.rds")
mpsz_flow <- read_rds("data/rds/mpsz_flow.rds")
mpsz_var <- read_rds("data/rds/mpsz_var.rds")
```

### Creationg 'spflow_network-class' objects

'spflow_network-class' is an S4 class that contains all info on a spatial network which is composed by a set of nodes that are linked by some neighbourhood relation. It can be created by using ['spflow_network()]'(https://lukece.github.io)

For our model, we choose the contiguity based neighbourhood struture.

```{R}
mpsz_net <- spflow_network(
  id_net = "sg",
  node_neighborhood = 
    nb2mat(mpsz_nb$by_contiguity), #to use adaptive weight
  node_data = mpsz_var,   
  node_key_column = "SZ_CODE")

mpsz_net
```

```{r}
mpsz_net_pairs <- spflow_network_pair(
  id_orig_net = "sg",
  id_dest_net = "sg",
  pair_data = mpsz_flow,
  orig_key_column = "ORIGIN_SZ",
  dest_key_column = "DESTIN_SZ")

mpsz_net_pairs
```

```{R}
mpsz_multi_net <- spflow_network_multi(mpsz_net,
                                       mpsz_net_pairs)
mpsz_multi_net
```

## Correlation Analysis

Multicollinearity refers

pair

```{r}
#| eval: false
cor_formula <- log(1 + TRIPS) ~
  BUSSTOP_COUNT +
  AGE7_12 +
  AGE7_12 +
  AGE7_12 + 
  SCHOOL_COUNT +
  BUSINESS_COUNT +
  RETAILS_COUNT +
  FINSERV_COUNT +
  P_(log(DISTANCE + 1))

cor_mat <- pair_cor(
  mpsz_multi_net,
  spflow_formula = cor_formula,
  add_lags_x = FALSE)

colnames(cor_mat) <- paste0(substr(colnames(cor_mat),1,3),"...")

cor_image(cor_mat)
```

```{R}
base_model <- spflow(
  spflow_formula = log(1 + TRIPS) ~
    O_(BUSSTOP_COUNT +
         AGE25_64) +
    D_(SCHOOL_COUNT +
         BUSINESS_COUNT +
         RETAILS_COUNT +
         FINSERV_COUNT) +
    P_(log(DISTANCE + 1)),
  spflow_networks = mpsz_multi_net)

base_model
```
```{R}
par(old_par)
```


```{R}
corr_residual <- pair_cor(base_model)
colnames(corr_residual) <- substr(colnames(corr_residual),1,3)
cor_image(corr_residual)
```

```{R}
#| eval: false
spflow_formula <- log(1 + TRIPS) ~
    O_(BUSSTOP_COUNT +
         AGE25_64) +
    D_(SCHOOL_COUNT +
         BUSINESS_COUNT +
         RETAILS_COUNT +
         FINSERV_COUNT) +
    P_(log(DISTANCE + 1))

model_control <- spflow_control(
  estimation_method = "mle",
  model = "model_1")

mle_model <- spflow(
  spflow_formula,
  spflow_networks = mpsz_multi_net,
  estimation_control = model_control)

mle_model
```

```{R}
#| eval: false
spflow_formula <- log(1 + TRIPS) ~
    O_(BUSSTOP_COUNT +
         AGE25_64) +
    D_(SCHOOL_COUNT +
         BUSINESS_COUNT +
         RETAILS_COUNT +
         FINSERV_COUNT) +
    P_(log(DISTANCE + 1))

model_control <- spflow_control(
  estimation_method = "mle",
  model = "model_2")

mle_model2 <- spflow(
  spflow_formula,
  spflow_networks = mpsz_multi_net,
  estimation_control = model_control)

mle_model2
```

```{R}
#| eval: false
spflow_formula <- log(1 + TRIPS) ~
    O_(BUSSTOP_COUNT +
         AGE25_64) +
    D_(SCHOOL_COUNT +
         BUSINESS_COUNT +
         RETAILS_COUNT +
         FINSERV_COUNT) +
    P_(log(DISTANCE + 1))

model_control <- spflow_control(
  estimation_method = "mle",
  model = "model_8")

mle_model8 <- spflow(
  spflow_formula,
  spflow_networks = mpsz_multi_net,
  estimation_control = model_control)

mle_model8
```







