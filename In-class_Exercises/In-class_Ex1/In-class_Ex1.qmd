---
title: "In-class_Ex1: My First Date with Geospatial Data Analytics"
date: "18 November 2023"
date-modified: "last-modified"
format: html
execute: 
  echo: true
  eval: true
  warning: false
editor: visual
---

## Getting Started

The code chunk below load the following packages:

-   tmap: for thematic mapping
-   sf for geospatial data handling
-   tidyverse for non-spatial data handling.
-   knitr for creating html table

```{r}
pacman::p_load(tmap, sf, tidyverse, knitr)
```

## Preparing the Flow Data

## Importing the OD data

Firstly, we will import the *Passenger Volume by Origin Destination Bus Stops* data set downloaded from LTA DataMall by using 'read_csv()' of **readr** package.

```{r}
#\| eval: false 
odbus <- read_csv("data/aspatial/origin_destination_bus_202310.csv", show_col_types = FALSE)
```

From below, the values in OROGIN_PT_CODE and DESTINATON_PT_CODE odbus in the tibble data frame are in numeric data type.

```{r}
glimpse(odbus)
```

Using appropriate tidyverse functions to convert these data values into factor data type.

```{r}
odbus$ORIGIN_PTCODE <- as.factor(odbus$ORIGIN_PT_CODE)
odbus$DESTINATION_PT_CODE <- as.factor(odbus$DESTINATION_PT_CODE)
```

From below, the values in OROGIN_PT_CODE and DESTINATON_PT_CODE odbus in the tibble data frame are now in factor data type.

```{r}
glimpse(odbus)
```

### Extracting the study data

For the purpose of this exercise, extract commuting flows during the weekday morning peak and label the output tibble data table as origin7_9.

```{r}
origin7_9 <- odbus %>%
  filter(DAY_TYPE == "WEEKDAY") %>%
  filter(TIME_PER_HOUR >= 7 &
           TIME_PER_HOUR <= 9) %>%
  group_by(ORIGIN_PT_CODE) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))
```

An extract of the top few data points is as follows.

```{R}
kable(head(origin7_9))
```

Convert and save the tible data in rds format as follows.

```{R}
write_rds(origin7_9, "data/rds/origin7_9.rds")
```

Import file back into R as follows.

```{R}
origin7_9 <- read_rds("data/rds/origin7_9.rds")
```

## Importing geospatial data

Import BusStop layer downloaded from LTA DataMall into RStudio and save it as a sf data frame called busstop.

```{r}
busstop <- st_read(dsn = "data/geospatial",
                   layer = "BusStop") %>%
  st_transform(crs = 3414)
```

The structure of busstop sf tibble data frame is as follows.

```{R}
glimpse(busstop)
```

Import MPSZ-2019 downloaded from eLearn into RStudio and save it as a sf data frame called mpsz.

```{r}
mpsz <- st_read(dsn = "data/geospatial",
                   layer = "MPSZ-2019") %>%
  st_transform(crs = 3414)
```

The structure of mpsz sf tibble data frame is as follows.

```{R}
glimpse(mpsz)
```

##### Note:

-   st_read() function of sf package is used to import the shapefile into R as sf data frame.
-   st_transform() function of sf package is used to transform the projection to crs 3414.

## Geospatial Data Wrangling

### Combining BuStop and MPSZ

Populate the planning subzone code (i.e. SUBZONE_C) of mpsz sf data frame into busstop sf data frame as follows.

```{R}
busstop_mpsz <- st_intersection(busstop, mpsz) %>%
  select(BUS_STOP_N, SUBZONE_C) %>%
  st_drop_geometry()
```

##### Note:

-   st_intersection() is used to perform point and polygon overly and the output will be in point sf object.
-   select() of dplyr package is then use to retain only BUS_STOP_N and SUBZONE_C in the busstop_mpsz sf data frame.
-   5 bus stops are excluded in the resultant data frame because they are outside of Singapore bpundary.

Save the output into rds format as follows.

```{R}
write_rds(busstop_mpsz, "data/rds/busstop_mpsz.csv")
```

Append the planning subzone code from busstop_mpsz data frame onto odbus7_9 data frame as follows.

```{R}
origin_SZ <- left_join(origin7_9 , busstop_mpsz,
            by = c("ORIGIN_PT_CODE" = "BUS_STOP_N")) %>%
  rename(ORIGIN_BS = ORIGIN_PT_CODE,
         ORIGIN_SZ = SUBZONE_C) %>%
  group_by(ORIGIN_SZ) %>%
  summarise(TOT_TRIPS = sum(TRIPS))
```

As a good practice, check for duplicating records as follows.

```{R}
duplicate <- origin_SZ %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()
```

If duplicated records are found, retain the unique records as follows.

```{R}
origin_data <- unique(origin_SZ)
```

As a good practice to confirm if the duplicating records issue has been addressed fully by updating the od_data data frame with the planning subzone codes as follows

```{R}
origintrip_SZ <- left_join(mpsz, 
                           origin_SZ,
                           by = c("SUBZONE_C" = "ORIGIN_SZ"))
```

## Choropleth Visualisation

Prepare a choropleth map showing the distribution of passenger trips at planning sub-zone level as follows

```{R}
tm_shape(origintrip_SZ)+
  tm_fill("TOT_TRIPS", 
          style = "quantile", 
          palette = "Blues",
          title = "Passenger trips") +
  tm_layout(main.title = "Passenger trips generated at planning sub-zone level",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from URA\n and Passenger trips data from LTA", 
             position = c("left", "bottom"))
```

### Creating interactive map

```{R}
tmap_mode("view")
tmap_options(check.and.fix = TRUE)
tm_shape(origintrip_SZ)+
  tm_fill("TOT_TRIPS", 
          style = "quantile", 
          palette = "Blues",
          title = "Passenger trips") +
  tm_layout(main.title = "Passenger trips generated at planning sub-zone level",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from URA\n and Passenger trips data from LTA", 
             position = c("left", "bottom"))
```
