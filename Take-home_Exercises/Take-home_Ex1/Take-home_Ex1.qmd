---
title: "Take-home_Ex1"
author: "LOW JI XIONG"
---

## Overview



## Getting Started

The code chunk below load the following packages:

-   tmap: for thematic mapping
-   sf for geospatial data handling
-   tidyverse for non-spatial data handling.
-   knitr for creating html table
-   spdep for
-   sfdep for
-   plotly for interactive plots

```{r}
pacman::p_load(tmap, sf, tidyverse, knitr, spdep, sfdep, plotly, zoo, Kendall)
```

## Importing  & Preparing the Data

### Importing the aspatial data

Firstly, the *Passenger Volume by Origin Destination Bus Stops* data set for the month of October 2023, from LTA DataMall, will be imported by using 'read_csv()' of \*\*readr\* package.

```{r}
#\| eval: false 
odbus <- read.csv("data/aspatial/origin_destination_bus_202310.csv")
```

From below, the values in OROGIN_PT_CODE and DESTINATON_PT_CODE odbus in the tibble data frame are in numeric data type.

```{r}
glimpse(odbus)
```

Using appropriate tidyverse functions to convert these data values into factor data type.

```{r}
odbus$ORIGIN_PTCODE <- as.factor(odbus$ORIGIN_PT_CODE)
odbus$DESTINATION_PT_CODE <- as.factor(odbus$DESTINATION_PT_CODE)
```

From below, the values in OROGIN_PT_CODE and DESTINATON_PT_CODE odbus in the tibble data frame are now in factor data type.

```{r}
glimpse(odbus)
```

## Importing geospatial data

Import BusStop layer downloaded from LTA DataMall into RStudio and save it as a sf data frame called busstop.

```{r}
busstop <- st_read(dsn = "data/geospatial",
                   layer = "BusStop") %>%
  st_transform(crs = 3414)
```
  
The structure of busstop sf tibble data frame is as follows.

```{R}
glimpse(busstop)
```
## Converting to Hexagonal grid

Convert to hexagonal grid and filtering out points with Number of Collisions = 0, as follows.

```{R}
busstop_hxgn_grid = st_make_grid(busstop, c(250, 250), what = "polygons", square = FALSE)

# To sf and add grid ID
hxgn_grid_sf = st_sf(busstop_hxgn_grid) %>%
  # add grid ID
  mutate(grid_id = 1:length(lengths(busstop_hxgn_grid)))

# count number of points in each grid
# https://gis.stackexchange.com/questions/323698/counting-points-in-polygons-with-sf-package-of-r
hxgn_grid_sf$n_colli = lengths(st_intersects(hxgn_grid_sf, busstop))

# remove grid without value of 0 (i.e. no points in side that grid)
hxgn_count = filter(hxgn_grid_sf, n_colli > 0)
```

Plot the map with hexagonal grid as follows.

```{R}
tmap_mode("view")

map_hxgn = tm_shape(hxgn_count) +
  tm_fill(
    col = "n_colli",
    palette = "Reds",
    style = "cont",
    title = "Number of collisions",
    id = "grid_id",
    showNA = FALSE,
    alpha = 0.6,
    popup.vars = c(
      "Number of collisions: " = "n_colli"
    ),
    popup.format = list(
      n_colli = list(format = "f", digits = 0)
    )
  ) +
  tm_borders(col = "grey40", lwd = 0.7)

map_hxgn
```

## Geovisualisation and Analysis

### Extracting the passenger trips for peak hour time intervals

For the purpose of this exercise, extract commuting flows during the weekday morning peak and label the output tibble data table as origin7_9.

```{r}
#| eval: false
origin7_9 <- odbus %>%
  filter(DAY_TYPE == "WEEKDAY") %>%
  filter(TIME_PER_HOUR >= 7 &
           TIME_PER_HOUR <= 9) %>%
  group_by(ORIGIN_PT_CODE) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))
```

An extract of the top few data points is as follows.

```{R}
kable(head(origin7_9))
```

Convert and sav the tible data in rds format as follows.

```{R}
write_rds(origin7_9, "data/rds/origin7_9.rds")
```

Import file back into R as follows.

```{R}
origin7_9 <- read_rds("data/rds/origin7_9.rds")
```

## Geospatial Data Wrangling

### Combining BuStop and MPSZ

Populate the planning subzone code (i.e. SUBZONE_C) of mpsz sf data frame into busstop sf data frame as follows.

```{R}
busstop_mpsz <- st_intersection(busstop, mpsz) %>%
  select(BUS_STOP_N, SUBZONE_C) %>%
  st_drop_geometry()
```

##### Note:
- st_intersection() is used to perform point and polygon overly and the output will be in point sf object.
- select() of dplyr package is then use to retain only BUS_STOP_N and SUBZONE_C in the busstop_mpsz sf data frame.
- 5 bus stops are excluded in the resultant data frame because they are outside of Singapore bpundary.

Save the output into rds format as follows.

```{R}
write_rds(busstop_mpsz, "data/rds/busstop_mpsz.csv")
```

Append the planning subzone code from busstop_mpsz data frame onto odbus7_9 data frame as follows.

```{R}
origin_SZ <- left_join(origin7_9 , busstop_mpsz,
            by = c("ORIGIN_PT_CODE" = "BUS_STOP_N")) %>%
  rename(ORIGIN_BS = ORIGIN_PT_CODE,
         ORIGIN_SZ = SUBZONE_C) %>%
  group_by(ORIGIN_SZ) %>%
  summarise(TOT_TRIPS = sum(TRIPS))
```

As a good practice, check for duplicating records as follows.

```{R}
duplicate <- origin_SZ %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()
```

If duplicated records are found, retain the unique records as follows.

```{R}
origin_data <- unique(origin_SZ)
```

As a good practice to confirm if the duplicating records issue has been addressed fully by updating the od_data data frame with the planning subzone codes as follows

```{R}
origintrip_SZ <- left_join(mpsz, 
                           origin_SZ,
                           by = c("SUBZONE_C" = "ORIGIN_SZ"))
```

## Choropleth Visualisation

Prepare a choropleth map showing the distribution of passenger trips at planning sub-zone level as follows

```{R}
tm_shape(origintrip_SZ)+
  tm_fill("TOT_TRIPS", 
          style = "quantile", 
          palette = "Blues",
          title = "Passenger trips") +
  tm_layout(main.title = "Passenger trips generated at planning sub-zone level",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from URA\n and Passenger trips data from LTA", 
             position = c("left", "bottom"))
```

### Creating interactive map

```{R}
tmap_mode("view")
tmap_options(check.and.fix = TRUE)
tm_shape(origintrip_SZ)+
  tm_fill("TOT_TRIPS", 
          style = "quantile", 
          palette = "Blues",
          title = "Passenger trips") +
  tm_layout(main.title = "Passenger trips generated at planning sub-zone level",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from URA\n and Passenger trips data from LTA", 
             position = c("left", "bottom"))
```


