---
title: "Hands-on_Ex3: Processing and Visualising Flow Data"
---

## Overview

Spatial interaction represent the flow of people, material, or information between locations in geographical space. It encompasses everything from freight shipments, energy flows, and the global trade in various goods & services, to flight schedules, rush hour woes, and pedestrian foot traffic.

Each spatial interaction, as an analogy for a set of movements, comprises of a discrete origin/destination pair. Each pair can be represented as a cell in a matrix where rows are related to the locations (centroids) of origin, while columns are related to locations (centroids) of destination. Such a matrix is commonly known as an origin/destination matrix, or a spatial interaction matrix.

In this hands-on exercise, I learn how to:

-   to import and extract OD data for a selected time interval,
-   to import and save geospatial data (i.e. bus stops and mpsz) into sf tibble data frame objects,
-   to build an OD matrix
-   to populate planning subzone code into bus stops sf tibble data frame,
-   to construct desire lines geospatial data from the OD data, and
-   to visualise passenger volume by origin and destination bus stops by using the desire lines data.

## Getting Started

The code chunk below load the following packages:

-   tmap: for thematic mapping
-   sf for geospatial data handling
-   tidyverse for non-spatial data handling.

```{r}
pacman::p_load(tmap, sf, DT, stplanr,
               performance,
               ggpubr, tidyverse)
```

## Preparing the Flow Data

### Importing the OD data

Firstly, we will import the *Passenger Volume by Origin Destination Bus Stops* data set downloaded from LTA DataMall by using 'read_csv()' of \*\*readr\* package.

```{r}
#\| eval: false 
odbus <- read_csv("data/aspatial/origin_destination_bus_202310.csv", show_col_types = FALSE)
```

From below, the values in OROGIN_PT_CODE and DESTINATON_PT_CODE odbus in the tibble data frame are in numeric data type.

```{r}
glimpse(odbus)
```

Using appropriate tidyverse functions to convert these data values into factor data type.

```{r}
odbus$ORIGIN_PTCODE <- as.factor(odbus$ORIGIN_PT_CODE)
odbus$DESTINATION_PT_CODE <- as.factor(odbus$DESTINATION_PT_CODE)
```

From below, the values in OROGIN_PT_CODE and DESTINATON_PT_CODE odbus in the tibble data frame are now in factor data type.

```{r}
glimpse(odbus)
```

### Extracting the study data

For the purpose of this exercise, extract commuting flows during the weekday morning peak and label the output tibble data table as origin6_9.

```{r}
odbus6_9 <- odbus %>%
  filter(DAY_TYPE == "WEEKDAY") %>%
  filter(TIME_PER_HOUR >= 6 &
           TIME_PER_HOUR <= 9) %>%
  group_by(ORIGIN_PT_CODE,
           DESTINATION_PT_CODE) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))
```

The tabulated data points is as follows.

```{R}
head(odbus6_9)
```

Convert and save the tible data in rds format as follows.

```{R}
write_rds(odbus6_9, "data/rds/odbus6_9.rds")
```

Import file back into R as follows.

```{R}
odbus6_9 <- read_rds("data/rds/odbus6_9.rds")
```

## Working with Geospatial Data

### Importing geospatial data

Import BusStop layer downloaded from LTA DataMall into RStudio and save it as a sf data frame called busstop.

```{r}
busstop <- st_read(dsn = "data/geospatial",
                   layer = "BusStop") %>%
  st_transform(crs = 3414)
```

Import MPSZ-2019 downloaded from eLearn into RStudio and save it as a sf data frame called mpsz.

```{r}
mpsz <- st_read(dsn = "data/geospatial",
                   layer = "MPSZ-2019") %>%
  st_transform(crs = 3414)
```

The structure of mpsz sf tibble data frame is as follows.

```{R}
mpsz
```

##### Note:

-   st_read() function of sf package is used to import the shapefile into R as sf data frame.
-   st_transform() function of sf package is used to transform the projection to crs 3414.

## Geospatial Data Wrangling

### Combining BuStop and MPSZ

Populate the planning subzone code (i.e. SUBZONE_C) of mpsz sf data frame into busstop sf data frame as follows.

```{R}
busstop_mpsz <- st_intersection(busstop, mpsz) %>%
  select(BUS_STOP_N, SUBZONE_C) %>%
  st_drop_geometry()
```

##### Note:

-   st_intersection() is used to perform point and polygon overly and the output will be in point sf object.
-   select() of dplyr package is then use to retain only BUS_STOP_N and SUBZONE_C in the busstop_mpsz sf data frame.
-   5 bus stops are excluded in the resultant data frame because they are outside of Singapore bpundary.

```{R}
datatable(busstop_mpsz)
```

Save the output into rds format as follows.

```{R}
write_rds(busstop_mpsz, "data/rds/busstop_mpsz.rds")
```

Append the planning subzone code from busstop_mpsz data frame onto odbus6_9 data frame as follows.

```{R}
od_data <- left_join(odbus6_9 , busstop_mpsz,
            by = c("ORIGIN_PT_CODE" = "BUS_STOP_N")) %>%
  rename(ORIGIN_BS = ORIGIN_PT_CODE,
         ORIGIN_SZ = SUBZONE_C,
         DESTIN_BS = DESTINATION_PT_CODE)
```

As a good practice, check for duplicating records as follows.

```{R}
duplicate <- od_data %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()
```

If duplicated records are found, retain the unique records as follows.

```{R}
od_data <- unique(od_data)
```

As a good practice to confirm if the duplicating records issue has been addressed fully by updating the od_data data frame with the planning subzone codes as follows

```{R}
od_data <- left_join(od_data, 
                     busstop_mpsz,
                     by = c("DESTIN_BS" = "BUS_STOP_N"))
```

```{R}
duplicate <- od_data %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()
```

```{R}
od_data <- unique(od_data)
```

```{R}
od_data <- od_data %>%
  rename(DESTIN_SZ = SUBZONE_C) %>%
  drop_na() %>%
  group_by(ORIGIN_SZ, DESTIN_SZ) %>%
  summarise(MORNING_PEAK = sum(TRIPS))
```

Convert and save the tible data in rds format as follows.

```{R}
write_rds(od_data, "data/rds/od_data.rds")
```

Import file back into R as follows.

```{R}
od_data <- read_rds("data/rds/od_data.rds")
```

## Visualising Spatial Interaction

I learn how to prepare a desire line using **stplanar** package

### Removing intra-zonal flows

Remove inter-zonal flows as follows.

```{R}
od_data1 <- od_data[od_data$ORIGIN_SZ!=od_data$DESTIN_SZ,]
```

### Creating desire lines

Use od2line() of stplanr package to create the desire lines as follows.

```{R}
flowLine <- od2line(flow = od_data1, 
                    zones = mpsz,
                    zone_code = "SUBZONE_C")
```

### Visualising desire lines

Visualise the resulting desire lines with the follwing code.

```{R}
tm_shape(mpsz) +
  tm_polygons() +
flowLine %>%  
tm_shape() +
  tm_lines(lwd = "MORNING_PEAK",
           style = "quantile",
           scale = c(0.1, 1, 3, 5, 7, 10),
           n = 6,
           alpha = 0.3)
```

##### Warning

Be patient, the rendering process takes more time because of the transparency argument (i.e. alpha)

When the flow data are very messy and highly skewed like the one shown above, it is wiser to focus on selected flows, for example flow greater than or equal to 5000 as shown below.

```{R}
tm_shape(mpsz) +
  tm_polygons() +
flowLine %>%  
  filter(MORNING_PEAK >= 5000) %>%
tm_shape() +
  tm_lines(lwd = "MORNING_PEAK",
           style = "quantile",
           scale = c(0.1, 1, 3, 5, 7, 10),
           n = 6,
           alpha = 0.3)

```
