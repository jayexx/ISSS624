---
title: "Hands-on_Ex2-2"
author: "J X Low"
---

## Overview

In this hands-on exercise, I learn how to compute Global and Local Measure of Spatial Autocorrelation (GLSA) in R, using **sf** (*for import*), **readr** (*for import*), **dplyr** (*for relational join*), **tmap** (*for output visualisation analysis*), and **spdep** (*for the areas below*) packages.

-   compute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of spdep package,
    -   plot Moran scatterplot,
    -   compute and plot spatial correlogram using appropriate function of spdep package.
-   compute Local Indicator of Spatial Association (LISA) statistics for detecting clusters and outliers by using appropriate functions spdep package;
-   compute Getis-Ord's Gi-statistics for detecting hot spot or/and cold spot area by using appropriate functions of spdep package

## Getting Started

### The analytical question

In spatial policy, one of the main development objective of the local government and planners is to ensure equal distribution of development in the province. Our task in this study, hence, is to apply appropriate spatial statistical methods to discover if development are even distributed geographically. If the answer is No. Then, our next question will be “is there sign of spatial clustering?”. And, if the answer for this question is yes, then our next question will be “where are these clusters?”

In this case study, we are interested to examine the spatial pattern of a selected development indicator (i.e. GDP per capita) of [Hunan Provice, People Republic of China](https://en.wikipedia.org/wiki/Hunan).

### Datasets

Data set consists of:

- Hunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.
- Hunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.

### Loading packages

The code chunk below installs and loads [spdep](https://cran.r-project.org/web/packages/spdep/spdep.pdf) [sf](https://cran.r-project.org/web/packages/sf/sf.pdf), [tmap](https://cran.r-project.org/web/packages/tmap/tmap.pdf) and tidyverse packages into R environment

```{r}
pacman:: p_load(dplyr, readr, tmap, sf, tidyverse, spdep, knitr)
```

## Importing Data

Raw data files were obtained for Hunan from e-learn.

### Import shapefile into r environment

```{r}
hunan <- st_read(dsn = "data/geospatial", 
                 layer = "Hunan")
```

### Importing Attribute Data (csv file)

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv", show_col_types = FALSE)
```

### Data Preparation (relational join)

Update the attribute table of Hunan's Spatial Polygons DataFrame with the attribute fields of hunan2012 DataFrame by using left_join() of dplyr package, with the following code chunk

```{R}
hunan <- left_join(hunan,hunan2012)%>%
  select(1:4, 7, 15)
```

### Visualising Regional Development Indicator

Prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using qtm() of tmap package

```{R}
equal <- tm_shape(hunan) +
  tm_fill("GDPPC",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal interval classification")

quantile <- tm_shape(hunan) +
  tm_fill("GDPPC",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal quantile classification")

tmap_arrange(equal, 
             quantile, 
             asp=1, 
             ncol=2)
```

## Global Spatial Autocorrelation

### Computing Contiguity Spatial Weights

1st, construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. county) in the study area.

poly2nb() of spdep package is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. Based on the documentation, a “queen” argument that takes TRUE or FALSE as options will be able to pass. If this argument is not specified, the default is set to TRUE, that is, if queen = FALSE is not specified this function will return a list of 1st order neighbours using the Queen criteria.

More specifically, compute Queen contiguity weight matrix as follows.

```{R}
wm_q <- poly2nb(hunan, 
                queen=TRUE)
summary(wm_q)
```
Summary report above shows 88 area units in Hunan, with the most connected area unit having 11 neighbours, and only 2 area units with only 1 neighbour.

### Row-standardised weights matrix

Need to assign weights to each neighboring polygon. Each neighboring polygon will be assigned equal weight (style=“W”). This is done by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summarise the neighbors’ values, one drawback is that polygons along the edges of the study area will base their lagged values on fewer polygons, thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.

```{R}
rswm_q <- nb2listw(wm_q, 
                   style="W", 
                   zero.policy = TRUE)
rswm_q
```

The input of nb2listw() must be an object of class nb. The syntax of the function has two major arguments, namely style and zero.poly.

- style can take values “W”, “B”, “C”, “U”, “minmax” and “S”. B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).

- If zero policy is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice.

### Global Spatial Autocorrelation: Moran’s I

Code chunk below performs Moran’s I statistical testing using moran.test() of spdep.

```{R}
moran.test(hunan$GDPPC, 
           listw=rswm_q, 
           zero.policy = TRUE, 
           na.action=na.omit)
```
Question: What statistical conclusion can you draw from the output above?

Answer: Since p-value < 5%, reject the null hypothesis with 95% confidence, and hence it is statistically significant  that the value is greater.

#### Computing Monte Carlo Moran’s I

The code chunk below performs permutation test for Moran’s I statistic by using moran.mc() of spdep. A total of 1000 simulation will be performed.

```{R}
set.seed(1234)
bperm= moran.mc(hunan$GDPPC, 
                listw=rswm_q, 
                nsim=999, 
                zero.policy = TRUE, 
                na.action=na.omit)
bperm
```

Question: What statistical conclustion can you draw from the output above?

Answer: Based on the simulation, a similar conclusion can be drawn with p-value <5%, that it is statistically significant  that the value is greater.

#### Visualising Monte Carlo Moran’s I

Examine the simulated Moran’s I test statistics in greater detail by plotting the distribution of the statistical values as a histogram by using the code chunk below, using hist() and abline() of R Graphics.

```{R}
mean(bperm$res[1:999])
```

```{R}
var(bperm$res[1:999])
```

```{R}
summary(bperm$res[1:999])
```

```{R}
hist(bperm$res, 
     freq=TRUE, 
     breaks=20, 
     xlab="Simulated Moran's I")
abline(v=0, 
       col="red") 
```
Question: What statistical observation can you draw from the output above?

Challenge: Instead of using Base Graph to plot the values, plot the values by using ggplot2 package.

### Global Spatial Autocorrelation: Geary’s

#### Geary’s C test

Geary’s C test for spatial autocorrelation by using geary.test() of spdep

```{R}
geary.test(hunan$GDPPC, listw=rswm_q)
```

#### Computing Monte Carlo Geary’s C

Permutation test for Geary’s C statistic by using geary.mc() of spdep

```{R}
set.seed(1234)
bperm=geary.mc(hunan$GDPPC, 
               listw=rswm_q, 
               nsim=999)
bperm
```
Question: What statistical conclusion can you draw from the output above?

Answer: Since p-value < 5%, reject the null hypothesis with 95% confidence, and hence it is statistically significant  that the value is greater.

#### Visualising the Monte Carlo Geary’s C

Plot a histogram to reveal the distribution of the simulated values by using the code chunk below.

```{R}
mean(bperm$res[1:999])
```

```{R}
var(bperm$res[1:999])
```

```{R}
summary(bperm$res[1:999])
```

```{R}
hist(bperm$res, freq=TRUE, breaks=20, xlab="Simulated Geary c")
abline(v=1, col="red") 
```
Question: What statistical observation can you draw from the output?

## Spatial Correlogram

Spatial correlograms are great to examine patterns of spatial autocorrelation in your data or model residuals. They show how correlated are pairs of spatial observations when you increase the distance (lag) between them - they are plots of some index of autocorrelation (Moran’s I or Geary’s c) against distance.Although correlograms are not as fundamental as variograms (a keystone concept of geostatistics), they are very useful as an exploratory and descriptive tool. For this purpose they actually provide richer information than variograms.

### Compute Moran’s I correlogram

Use sp.correlogram() of spdep package to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Moran’s I. The plot() of base Graph is then used to plot the output.

```{R}
MI_corr <- sp.correlogram(wm_q, 
                          hunan$GDPPC, 
                          order=6, 
                          method="I", 
                          style="W")
plot(MI_corr)
```
By plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. 

Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.

```{R}
print(MI_corr)
```
Question: What statistical observation can you draw from the plot above?

### Compute Geary’s C correlogram and plot

Use sp.correlogram() of spdep package to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Geary’s C. The plot() of base Graph is then used to plot the output.

```{R}
GC_corr <- sp.correlogram(wm_q, 
                          hunan$GDPPC, 
                          order=6, 
                          method="C", 
                          style="W")
plot(GC_corr)
```

Similar to before, print the analysis report using the code chunk below.

```{R}
print(GC_corr)
```

