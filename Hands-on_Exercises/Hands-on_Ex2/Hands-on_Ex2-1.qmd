---
title: "Hands-on Exercise 2: Spatial Weights and Applications"
author: "J X Low"
---

## Overview

In this hands-on exercise, I learn how to compute spatial weights in R, using **sf** (*for import*), **readr** (*for import*), **dplyr** (*for relational join*), and **spdep** (*for calculating spatially lagged var*) packages.

## Getting Started

The code chunk below installs and loads [spdep](https://cran.r-project.org/web/packages/spdep/spdep.pdf) [sf](https://cran.r-project.org/web/packages/sf/sf.pdf), [tmap](https://cran.r-project.org/web/packages/tmap/tmap.pdf) and tidyverse packages into R environment

```{r}
pacman:: p_load(dplyr, readr, tmap, sf, tidyverse, spdep, knitr)
```

## Importing Data

Raw data files were obtained for Hunan from e-learn.

### Import shapefile into r environment

```{r}
hunan <- st_read(dsn = "data/geospatial", 
                 layer = "Hunan")
```

### Importing Attribute Data (csv file)

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv", show_col_types = FALSE)
```

### Data Preparation (relational join)

Update the attribute table of Hunan's Spatial Polygons DataFrame with the attribute fields of hunan2012 DataFrame by using left_join() of dplyr package, with the following code chunk

```{R}
hunan <- left_join(hunan,hunan2012)%>%
  select(1:4, 7, 15)
```

## Visualising Regional Development Indicator

Prepare base map using qtm() with the following code chunk

```{R}
basemap <- tm_shape(hunan) +
  tm_polygons() +
  tm_text("NAME_3", size=0.5)

gdppc <- qtm(hunan, "GDPPC")
tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```

## Computing Contiguity Spatial Weights

### Computing (QUEEN) contiguity based neighbours

```{R}
wm_q <- poly2nb(hunan, queen=TRUE)
summary(wm_q)
```

Summary report above shows 88 area units in Hunan, with the most connected area unit having 11 neighbours, and only 2 area units with only 1 neighbour.

See the list of neighbours of the Polygon ID = 1 with the following code chunk

```{R}
wm_q[[1]]
```

Retrieve the county name based on Polygon ID, for ID = 1 with the following code chunk

```{r}
hunan$County[1]
```

Retrieve the name of the 5 neighbouring counties with the following code chunk

```{R}
hunan$NAME_3[c(2,3,4,57,85)]
```

Retrieve the GDPPC of the 5 counties based on the Queen's method with the following code chunk

```{R}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

Display the complete weight matrix using str() with the following code chunk

```{R}
str(wm_q)
```

### Creating (ROOK) contiguity based neighbours

```{R}
wm_r <- poly2nb(hunan, queen=FALSE)
summary(wm_r)
```

Summary report above shows 88 area units in Hunan, with the most connected area unit having 10 neighbours, and only 2 area units with only 1 neighbour.

### Visualising contiguity weights

Connectivity graph takes a pt and displays a line to each neighboring pt. Working with polygons, need to get pts to associate with each polygon before making connectivity graph. Most typical method for this: Polygon Centroids. Calculate these in the sf package before moving onto the graphs.

Getting Latitude and Longitude of Polygon Centroids is more complicated than just running st_centroid on the sf object: us.bound. Need the coordinates in a separate data frame. To do this, use a mapping function. Mapping function applies a given function to each element of a vector and returns a vector of the same length. Input vector will be the geometry column of us.bound. Function will be st_centroid. Use map_dbl variation of map from the purrr package.

*(For more documentation, check out map documentation)*

To get longitude values, map the st_centroid function over the geometry column of us.bound and access the longitude value through double bracket notation \[\[\]\] and 1, which obtains only the longitude, which is the first value in each centroid, with the following code chunk.

```{R}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
```

Similar with latitude but using the second value per each centroid with \[\[2\]\], with the following code chunk.

```{R}
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```

Use cbind to put longitude and latitude into the same object with the following code chunk.

```{R}
coords <- cbind(longitude, latitude)
```

Use head() to check the formatting for 1st few observations with the following code chunk.

```{R}
head(coords)
```

#### Plotting Queen contiguity based neighbours map

```{R}
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
```

#### Plotting Rook contiguity based neighbours map

```{R}
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
```

#### Plotting both Queen and Rook contiguity based neighbours map

```{R}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey", main="Queen Contiguity")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
plot(hunan$geometry, border="lightgrey", main="Rook Contiguity")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

From the above, there are more connections within the Queen method, as expected, but minimal in this case.

## Computing distance based neighbours

Derive distance-based weight matrices using knearneigh() of **spdep** package.

The function identifies neighbours of region pts by Euclidean distance with a distance band with lower d1= and upper d2= bounds controlled by the bounds= argument. If unprojected coordinates are used and either specified in the coordinates object x or with x as a 2-column matrix and longlat=TRUE, great circle distances in **km** will be calculated assuming the WGS84 reference ellipsoid.

### Determine the cut-off distance

Determine the Distance Band Upper Limit with the code chunks below, based on the following steps.

-   Obtain matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.
-   Using knn2nb(), convert the resultant object returned by knearneigh() into a neighbours list, of class 'nb', with a list of integer vectors containing neighbour region number ids
-   Using nbdists() of spdep, find the length of neighbour relationship edges. The function returns in the units of the coordinates if the coordinates are projected, or else in km.
-   Using unlist(), remove the list structure of the returned object.

```{R}
#coords <- coordinates(hunan)
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

Summary above shows that the largest 1st nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least 1 neighbour

### Computing fixed distance weight matrix

```{R}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

Quiz: What is the meaning of "Average number of links: 3.681818" shown above?

It means out of the 88 regions, each region on average has 3.68 neighbouring links to other regions.

Using str() display the content of wm_d62 weight matrix with the following code chunk.

```{R}
str(wm_d62)
```

Alternatively, combine table() and card() of spdep to display structure of weight matrix, with the following code chunk.

```{R}
table(hunan$County, card(wm_d62))
```

```{r}
n_comp <- n.comp.nb(wm_d62)
n_comp$nc
```

```{r}
table(n_comp$comp.id)
```

#### Plotting fixed distance weight matrix

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE)
plot(k1, coords, add=TRUE, col="red", length=0.08)
```

Red lines show the links of 1st nearest neighbours, while black lines show the links of neighbours within the cut-off distance of 62km.

Alternatively, plot both next to each other with the following code chunk

```{R}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey", main="1st nearest neighbours")
plot(k1, coords, add=TRUE, col="red", length=0.08)
plot(hunan$geometry, border="lightgrey", main="Distance link")
plot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)

```

### Computing adaptive distance weight matrix

For fixed distance weight matrix, more densely settled areas (usually urban areas) tend to have more neighbours and the less densely settled areas (usually rural counties) tend to have lesser neighbours. Having many neighbours means the influence of each neighbor on a given feature is distributed across a larger number of neighbors, which can help to reduce the impact of outliers and other anomalies in the data.

To control the number of neighbours directly using k-nearest neighbours, we can either accept asymmetric neighbours or impose symmetry with the following code chunk.

```{R}
knn6 <- knn2nb(knearneigh(coords, k=6))
knn6
```

Display the matrix with the following code chunk.

```{R}
str(knn6)
```

#### Plotting distance based neighbours

```{R}
plot(hunan$geometry, border="lightgrey")
plot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

## Weights based on Inversed Distance

Compute the distances between areas by using nbdists() of spdep, using the following code chunk.

```{R}
dist <- nbdists(wm_q, coords, longlat = TRUE)
ids <- lapply(dist, function(x) 1/(x))
ids
```

### Row-standardised weights matrix

Next, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style="W"). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors' values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we'll stick with the style="W" option for simplicity's sake but note that other more robust options are available, notably style="B".

```{R}
rswm_q <- nb2listw(wm_q, style="W", zero.policy = TRUE)
rswm_q
```

The zero.policy=TRUE option allows for lists of non-neighbors. This should be used with caution since the user may not be aware of missing neighbors in their dataset however, a zero.policy of FALSE would return an error.

See the weight of the first polygon's eight neighbors type with the following code chunk

```{R}
rswm_q$weights[10]
```

Each neighbor is assigned 0.125 of the total weight. This means that when R computes the average neighboring income values, each neighbor's income will be multiplied by 0.2 before being tallied.

Using the same method, derive a row standardised distance weight matrix with the following the code chunk

```{R}
rswm_ids <- nb2listw(wm_q, glist=ids, style="B", zero.policy=TRUE)
rswm_ids
```

```{R}
rswm_q$weights[1]
```

```{R}
summary(unlist(rswm_ids$weights))
```

## Application of Spatial Weight Matrix

Discover 4 different sptial lagged var in this section.

### Spatial lag with row-standardized weights

Compute the average neighbor GDPPC value, aka spatially lagged values, for each polygon with the following code chunk

```{R}
GDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)
GDPPC.lag
```

Similar to before, retrieve the GDPPC of these 5 counties with the following code chunk

```{R}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

Append the spatially lag GDPPC values onto hunan sf data frame with the following code chunk

```{R}
lag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))
lag.res <- as.data.frame(lag.list)
colnames(lag.res) <- c("NAME_3", "lag GDPPC")
hunan <- left_join(hunan,lag.res)
```

Generate the table of average neighboring income values (stored in the Inc.lag object) for each county with the following code chunk

```{R}
head(hunan)
```

Plot both the GDPPC and spatial lag GDPPC for comparison with the folloing code chunk

```{R}
gdppc <- qtm(hunan, "GDPPC")
lag_gdppc <- qtm(hunan, "lag GDPPC")
tmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)
```

### Spatial lag as a sum of neighboring values

Calculate spatial lag as a sum of neighboring values by assigning binary weights. This requires going back to neighbors list, then applying a function that will assign binary weights, then use glist = in the nb2listw function to explicitly assign these weights.

Start by applying a function that will assign a value of 1 per each neighbor. This is done with lapply, which have been used to manipulate the neighbors structure throughout the past notebooks. Basically it applies a function across each value in the neighbors structure.

```{R}
b_weights <- lapply(wm_q, function(x) 0*x + 1)
b_weights2 <- nb2listw(wm_q, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

With the proper weights assigned, we can use lag.listw to compute a lag variable from the weight and GDPPC with the following code chunk

```{R}
lag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
lag.res <- as.data.frame(lag_sum)
colnames(lag.res) <- c("NAME_3", "lag_sum GDPPC")
```

Examine the results with the following code chunk

```{R}
lag_sum
```

Append the lag_sum GDPPC field into hunan sf data frame with the following code chunk

```{R}
hunan <- left_join(hunan, lag.res)
```

Plot both the GDPPC and Spatial Lag Sum GDPPC for comparison with the following code chunk

```{R}
gdppc <- qtm(hunan, "GDPPC")
lag_sum_gdppc <- qtm(hunan, "lag_sum GDPPC")
tmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)
```

### Spatial window avg

Spatial window average uses row-standardized weights and includes the diagonal element. To do this in R, we need to go back to the neighbors structure and add the diagonal element before assigning weights.

To add the diagonal element to the neighbour list, we just need to use include.self() from spdep.

```{R}
wm_qs <- include.self(wm_q)
```

The Number of nonzero links, Percentage nonzero weights and Average number of links are 536, 6.921488 and 6.090909 respectively as compared to wm_q of 448, 5.785124 and 5.090909

Find the neighbour list of area \[1\] by using the code chunk below.

```{R}
wm_qs[[1]]
```

Now \[1\] has 6 neighbours instead of 5

Obtain weights using nb2listw() with the following code chunk

```{R}
wm_qs <- nb2listw(wm_qs)
wm_qs
```

Again, we use nb2listw() and glist() to explicitly assign weight values.

Lastly, we just need to create the lag variable from our weight structure and GDPPC variable.

```{R}
lag_w_avg_gpdpc <- lag.listw(wm_qs, 
                             hunan$GDPPC)
lag_w_avg_gpdpc
```

Convert the lag variable listw object into a data.frame by using as.data.frame() with the following code chunk

```{R}
lag.list.wm_qs <- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))
lag_wm_qs.res <- as.data.frame(lag.list.wm_qs)
colnames(lag_wm_qs.res) <- c("NAME_3", "lag_window_avg GDPPC")
```

Note: The third command line on the code chunk above renames the field names of lag_wm_q1.res object into NAME_3 and lag_window_avg GDPPC respectively.

Next, the code chunk below will be used to append lag_window_avg GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.

```{R}
hunan <- left_join(hunan, lag_wm_qs.res)
```

Compare the values of lag GDPPC and Spatial window average, using kable() of Knitr package to prepare a table using the following code chunk

```{R}
hunan %>%
  select("County", 
         "lag GDPPC", 
         "lag_window_avg GDPPC") %>%
  kable()
```

Using qtm() of tmap package, plot the lag_gdppc and w_ave_gdppc maps next to each other for quick comparison

```{R}
w_avg_gdppc <- qtm(hunan, "lag_window_avg GDPPC")
tmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)
```

Note: For more effective comparison, it is advisable to use the core tmap mapping functions.

### Spatial window sum

The spatial window sum is the counter part of the window average, but without using row-standardized weights.

To add the diagonal element to the neighbour list, we just need to use include.self() from spdep.

```{R}
wm_qs <- include.self(wm_q)
wm_qs
```

Assign binary weights to the neighbour structure that includes the diagonal element

```{R}
b_weights <- lapply(wm_qs, function(x) 0*x + 1)
b_weights[1]
```

Notice that now \[1\] has six neighbours instead of five.

Use nb2listw() and glist() to explicitly assign weight values.

```{R}
b_weights2 <- nb2listw(wm_qs, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

With our new weight structure, we can compute the lag variable with lag.listw()

```{R}
w_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
w_sum_gdppc
```

Convert the lag variable listw object into a data.frame by using as.data.frame()

```{R}
w_sum_gdppc.res <- as.data.frame(w_sum_gdppc)
colnames(w_sum_gdppc.res) <- c("NAME_3", "w_sum GDPPC")
```

Note: The second command line on the code chunk above renames the field names of w_sum_gdppc.res object into NAME_3 and w_sum GDPPC respectively.

Append w_sum GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.

```{R}
hunan <- left_join(hunan, w_sum_gdppc.res)
```

Compare the values of lag GDPPC and Spatial window average, using kable() of Knitr package to prepare a table with the following code chunk

```{R}
hunan %>%
  select("County", "lag_sum GDPPC", "w_sum GDPPC") %>%
  kable()
```

Use qtm() of tmap package to plot the lag_sum GDPPC and w_sum_gdppc maps next to each other for quick comparison.

```{r}
w_sum_gdppc <- qtm(hunan, "w_sum GDPPC")
tmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)
```

Note: For more effective comparison, it is advicible to use the core tmap mapping functions.

## References

[Creating Neighbours using sf objects](https://cran.r-project.org/web/packages/spdep/vignettes/nb_sf.html)
