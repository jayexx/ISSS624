{
  "hash": "204a2dc0242ae453aefe99b8eadd6b37",
  "result": {
    "markdown": "---\ntitle: \"Take-home_Ex2\"\nauthor: \"Low Ji Xiong\"\n---\n\n\n\n## Introduction\n\nThe success of Singapore's public transport is commonly recognised as 1 of the quintessential indicator of its rapid growth and prosperity since her independence in 1965. It comprises of both public buses as well as mass rapid transport (MRT) trains. While the MRT network has been expanding across the many zones within Singapore, the bus network remains the most option accessible and reliable option amongst the two.\n\nThus, the utilisation pattern of buses are of key importance to multiple aspects of Singapore's socio-economic spheres, ranging from areas of work productivity and efficiency, environmental impact, tourism, and even to potential impact to cost of living and real estate development; which underpins the impetus of this exercise to gain a better understanding of the utilisation patterns and characteristics of Singapore's bus stops.\n\n## Objectives\n\nThe key objectives of this exercise are:\n\n-   To perform geovisualisation and analysis of Origin-Destination flows of passenger trips\n-   To perform Spatial Interaction Modelling for Origin-Destination flows of passenger trips\n\n## Getting Started\n\nThe code chunk below load the following packages:\n\n-   tmap: for thematic mapping\n-   sf: for simple feature geospatial data handling\n-   sp: for spatial polygon geospatial data handling\n-   tidyverse: for non-spatial data handling.\n-   knitr: for creating html table\n-   reshape2: for reshaping functions\n-   stplanr:\n-   spdep:\n-   sfdep: for creating an sf and tidyverse friendly interface as well as for introducing new functionality that is not present in spdep\n-   plotly: for interactive plots\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tmap, sf, sp, tidyverse, knitr,  reshape2, stplanr) # plotly, zoo, Kendall,sfdep,spdep,\n```\n:::\n\n\n## Importing and preparing the Base Geospatial and Aspatial Data\n\n### Aspatial data\n\nFirstly, the data set *Passenger Volume by Origin Destination Bus Stops* for the month of October 2023 from LTA DataMall, will be imported by using 'read_csv()' of \\*\\*readr\\* package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nodbus <- read.csv(\"data/aspatial/origin_destination_bus_202310.csv\")\n```\n:::\n\n\nGlimpse function is then used to discover the data type of the variables in the dataset. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(odbus)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 5,694,297\nColumns: 7\n$ YEAR_MONTH          <chr> \"2023-10\", \"2023-10\", \"2023-10\", \"2023-10\", \"2023-…\n$ DAY_TYPE            <chr> \"WEEKENDS/HOLIDAY\", \"WEEKDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       <int> 16, 16, 14, 14, 17, 17, 17, 7, 14, 14, 10, 20, 20,…\n$ PT_TYPE             <chr> \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      <int> 4168, 4168, 80119, 80119, 44069, 20281, 20281, 190…\n$ DESTINATION_PT_CODE <int> 10051, 10051, 90079, 90079, 17229, 20141, 20141, 1…\n$ TOTAL_TRIPS         <int> 3, 5, 3, 5, 4, 1, 24, 2, 1, 7, 3, 2, 5, 1, 1, 1, 1…\n```\n:::\n:::\n\nFrom above, the values in ORIGIN_PT_CODE and DESTINATON_PT_CODE in the odbus tibble data frame are in numeric data type.\n\nUsing appropriate tidyverse functions, these data values will be  converted into factor data type.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nodbus$ORIGIN_PT_CODE <- as.factor(odbus$ORIGIN_PT_CODE)\nodbus$DESTINATION_PT_CODE <- as.factor(odbus$DESTINATION_PT_CODE)\n```\n:::\n\n\nUsing Glimpse once more to check, the values in ORIGIN_PT_CODE and DESTINATON_PT_CODE odbus in the tibble data frame are now in factor data type, as below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(odbus)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 5,694,297\nColumns: 7\n$ YEAR_MONTH          <chr> \"2023-10\", \"2023-10\", \"2023-10\", \"2023-10\", \"2023-…\n$ DAY_TYPE            <chr> \"WEEKENDS/HOLIDAY\", \"WEEKDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       <int> 16, 16, 14, 14, 17, 17, 17, 7, 14, 14, 10, 20, 20,…\n$ PT_TYPE             <chr> \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      <fct> 4168, 4168, 80119, 80119, 44069, 20281, 20281, 190…\n$ DESTINATION_PT_CODE <fct> 10051, 10051, 90079, 90079, 17229, 20141, 20141, 1…\n$ TOTAL_TRIPS         <int> 3, 5, 3, 5, 4, 1, 24, 2, 1, 7, 3, 2, 5, 1, 1, 1, 1…\n```\n:::\n:::\n\n\n### Geospatial data\n\nThe geospatial data for BusStop downloaded from LTA DataMall into RStudio is then imported and saved as a sf data frame named busstop. Projected coordinate system is selected, which tends to be more accurate for distance measurement.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbusstop <- st_read(dsn = \"data/geospatial\",\n                   layer = \"BusStop\") %>%\n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `BusStop' from data source \n  `C:\\jayexx\\ISSS624\\Take_home_Exercises\\Take_home_Ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5161 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n```\n:::\n:::\n\n\nUsing the glimpse() function, the structure of busstop sf tibble data frame is as follows.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(busstop)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 5,161\nColumns: 4\n$ BUS_STOP_N <chr> \"22069\", \"32071\", \"44331\", \"96081\", \"11561\", \"66191\", \"2338…\n$ BUS_ROOF_N <chr> \"B06\", \"B23\", \"B01\", \"B05\", \"B05\", \"B03\", \"B02A\", \"B02\", \"B…\n$ LOC_DESC   <chr> \"OPP CEVA LOGISTICS\", \"AFT TRACK 13\", \"BLK 239\", \"GRACE IND…\n$ geometry   <POINT [m]> POINT (13576.31 32883.65), POINT (13228.59 44206.38),…\n```\n:::\n:::\n\n\nThe geospatial data for the Singapore Master Plan Subzone 2019 data downloaded from data.gov.sg is also imported and save it as a sf data frame named mpsz, similarly in projected coordinate system.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_read(dsn = \"data/geospatial\",layer =\"MPSZ-2019\") %>%\n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `MPSZ-2019' from data source \n  `C:\\jayexx\\ISSS624\\Take_home_Exercises\\Take_home_Ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n```\n:::\n:::\n\n### Preparing Hexagonal Grid for Traffic Analysis Zone (TAZ)\n\nCreating hexagonal grid in sf format with grid_id as follows. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nhxgn_grid = st_make_grid(mpsz, c(375, 375), what = \"polygons\", square = FALSE)\n\n# To sf and add grid ID\nhxgn_grid_sf = st_sf(hxgn_grid) %>%\n  mutate(grid_id = 1:length(lengths(hxgn_grid)))\n```\n:::\n\n\nIn the above, the hexagonal grid size is chosen to be 375m by 375m is based on the assumption that the maximum willingness of an average commuter to walk being 375m*2 which is 750m. \n\n### Merging Hexagonal Grid with Busstop Geospatial data\n\nImported busstop data is merged with Hexagonal grid as follows.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbusstop_hxgn_grid <- st_intersection(busstop, hxgn_grid_sf) %>%\n  select(BUS_STOP_N, grid_id) %>%\n  st_drop_geometry()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\n```\n:::\n:::\n\n\nCheck for BUS_STOP_N with duplicate grid_id is then performed as follows.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_duplicate <- busstop_hxgn_grid %>%\n  group_by(BUS_STOP_N) %>%\n  summarise(num_grid_id = n_distinct(grid_id))\n```\n:::\n\nFrom the resultant table in the code above, out of 5,144 busstops, 4 intercept across 2 grid_id.\n\nHence, for this exercise, to avoid double counting of trips subsequently, the duplicate grid_id for the 4 busstops are removed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbusstop_hxgn_grid <- distinct(busstop_hxgn_grid, BUS_STOP_N, .keep_all = TRUE)\n```\n:::\n\n\nbusstop_hxgn_grid data is re-merged with sf tibble data and converted to sf object class for subsequent geo-visualisation of hexagon grid for all busstops in Singapore, named as busstop_hxgn_grid_sf.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbusstop_hxgn_grid_sf <- left_join(busstop_hxgn_grid, \n                           hxgn_grid_sf,\n                           by = c(\"grid_id\" = \"grid_id\"))%>%\n  select(BUS_STOP_N, grid_id, hxgn_grid) %>%\n  st_sf()\n\ntm_shape(busstop_hxgn_grid_sf) + \n  tm_polygons()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex2_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n### Extracting the passenger trips for Weekday Evening Peakhour\n\nFor the purpose of this exercise, extract commuting flows during weekday evening peak and label the output tibble data table as odbus_wkd17_20.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nodbus_wkd17_20 <- odbus %>%\n  filter(DAY_TYPE == \"WEEKDAY\") %>%\n  filter(TIME_PER_HOUR >= 17 &\n           TIME_PER_HOUR <= 20) %>%\n  group_by(ORIGIN_PT_CODE,\n           DESTINATION_PT_CODE) %>%\n  summarise(TRIPS = sum(TOTAL_TRIPS))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'ORIGIN_PT_CODE'. You can override using\nthe `.groups` argument.\n```\n:::\n:::\n\n\nThe tible data sets is converted and saved in rds format and imported back into R as follows.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(odbus_wkd17_20, \"data/rds/odbus_wkd17_20.rds\")\nodbus_wkd17_20 <- read_rds(\"data/rds/odbus_wkd17_20.rds\")\n```\n:::\n\n\n### Merging Weekday Evening Peakhour Passenger Trips with Geospatial data\n\nThe merged busstop_hxgn_grid frame is then appended onto odbus_wkd17_20 data frame as follows.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwkd17_20_hxgn_grid <- left_join(busstop_hxgn_grid, odbus_wkd17_20,\n            by = c(\"BUS_STOP_N\" = \"ORIGIN_PT_CODE\")) %>%\n  rename(ORIGIN_BS = BUS_STOP_N,\n         ORIGIN_GRID = grid_id,\n         DESTIN_BS = DESTINATION_PT_CODE)\n```\n:::\n\n\nAs a good practice, check for duplicate records and retain duplicate records as follows.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_duplicate1 <- wkd17_20_hxgn_grid %>%\n  group_by_all() %>%\n  filter(n()>1) %>%\n  ungroup()\n\nwkd17_20_hxgn_grid <- unique(wkd17_20_hxgn_grid)\n```\n:::\n\n\nRepeat the same steps to obtain the DESTIN_GRID by joining with busstop_hxgn_grid once more as follows\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwkd17_20_hxgn_grid <- left_join(busstop_hxgn_grid, wkd17_20_hxgn_grid,\n            by = c(\"BUS_STOP_N\" = \"DESTIN_BS\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_duplicate2 <- wkd17_20_hxgn_grid %>%\n  group_by_all() %>%\n  filter(n()>1) %>%\n  ungroup()\n\nwkd17_20_hxgn_grid <- unique(wkd17_20_hxgn_grid)\n```\n:::\n\n\nFor this analysis, the trips are summed across multiple bus stops within each Hexagon grid, as follows.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwkd17_20_hxgn_grid <- wkd17_20_hxgn_grid%>%\n  rename(DESTIN_GRID = grid_id) %>%\n  drop_na() %>%\n  group_by(ORIGIN_GRID, DESTIN_GRID) %>%\n  summarise(TOT_TRIPS = sum(TRIPS))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'ORIGIN_GRID'. You can override using the\n`.groups` argument.\n```\n:::\n:::\n\nThe output will be saved as an rds file format and imported back into R as follows.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(wkd17_20_hxgn_grid, \"data/rds/wkd17_20_hxgn_grid.rds\")\nwkd17_20_hxgn_grid <- read_rds(\"data/rds/wkd17_20_hxgn_grid.rds\")\n```\n:::\n\n\n## Objective (1): Geovisualisation and Analysis of O-D flow of Passengers during Weekday Evening Peakhour\n\n### Geovisualisation of O-D flow\n\n#### Plotting Origin Points\n\nIn order to plot the origin points, the O-D Grid data is merged with hexagon grid simple feature tibble data and filtered as follows.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwkd17_20_hxgn_grid_O_sf <- left_join(hxgn_grid_sf, \n                           wkd17_20_hxgn_grid,\n                           by = c(\"grid_id\" = \"ORIGIN_GRID\"))%>%\n  group_by(grid_id) %>%\n  summarise(TOT_TRIPS = sum(TOT_TRIPS))\n\nwkd17_20_hxgn_grid_O_sf = filter(wkd17_20_hxgn_grid_O_sf, TOT_TRIPS > 0)\n```\n:::\n\n\nThe distribution of Origin points in the map is as follows.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\ntmap mode set to plotting\n```\n:::\n\n```{.r .cell-code}\ntmap_options(check.and.fix = TRUE)\n\ntm_shape(mpsz) +\n  tm_polygons() +\ntm_shape(wkd17_20_hxgn_grid_O_sf) +\n  tm_fill(\n    col = c(\"TOT_TRIPS\"),\n    palette = \"Blues\",\n    style = \"quantile\",\n    title = c(\"Total Passenger Trips from Origin Pt\"),\n    id = \"grid_id\",\n    showNA = FALSE,\n    alpha = 0.6,\n    popup.vars = c(\n      \"Total Trips: \" = \"TOT_TRIPS\"\n    ),\n    popup.format = list(\n      TOT_TRIPS = list(format = \"f\", digits = 0)\n    )\n  ) +\n  tm_layout(main.title = \"Origin Pt BusStop Passenger Trips During Weekday Evening Peak\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: The shape mpsz is invalid. See sf::st_is_valid\n```\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex2_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n#### Plotting Destination Points\n\nIn order to plot the destination points, the O-D Grid data is merged with hexagon grid simple feature tibble data and filtered as follows.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwkd17_20_hxgn_grid_D_sf <- left_join(hxgn_grid_sf, \n                           wkd17_20_hxgn_grid,\n                           by = c(\"grid_id\" = \"DESTIN_GRID\"))%>%\n  group_by(grid_id) %>%\n  summarise(TOT_TRIPS = sum(TOT_TRIPS))\n\nwkd17_20_hxgn_grid_D_sf = filter(wkd17_20_hxgn_grid_D_sf, TOT_TRIPS > 0)\n```\n:::\n\n\nThe distribution of Destination points in the map is as follows.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\ntmap mode set to plotting\n```\n:::\n\n```{.r .cell-code}\ntmap_options(check.and.fix = TRUE)\ntm_shape(mpsz) +\n  tm_polygons() +\ntm_shape(wkd17_20_hxgn_grid_D_sf) +\n  tm_fill(\n    col = c(\"TOT_TRIPS\"),\n    palette = \"Reds\",\n    style = \"quantile\",\n    title = c(\"Total Passenger Trips from Destination Pt\"),\n    id = \"grid_id\",\n    showNA = FALSE,\n    alpha = 0.6,\n    popup.vars = c(\n      \"Total Trips: \" = \"TOT_TRIPS\"\n    ),\n    popup.format = list(\n      TOT_TRIPS = list(format = \"f\", digits = 0)\n    )\n  ) +\n  tm_layout(main.title = \"Destination Pt BusStop Passenger Trips During Weekday Evening Peak\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: The shape mpsz is invalid. See sf::st_is_valid\n```\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex2_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n#### Plotting Desire lines\n\nFirst the Intra-zonal flow is removed, to scope the analysis to more substantial distance of travel. Data points with Origin points same as Destination points will hence be excluded as follows.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwkd17_20_hxgn_grid_dl <- wkd17_20_hxgn_grid[wkd17_20_hxgn_grid$ORIGIN_GRID!=wkd17_20_hxgn_grid$DESTIN_GRID,]\n```\n:::\n\n\nUsing od2line() function of stplanr package, the data for the desire lines are created in hexagonal grid as follows.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflowLine <- od2line(flow = wkd17_20_hxgn_grid_dl, \n                    zones = hxgn_grid_sf,\n                    zone_code = \"grid_id\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nCreating centroids representing desire line start and end points.\n```\n:::\n:::\n\n\nTo determine the appropriate ranges for a meaningful geovisualisation of the O-D desire lines, the summary statistic for the flowline is obtained as follows.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(flowLine)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  ORIGIN_GRID     DESTIN_GRID      TOT_TRIPS                 geometry     \n Min.   :  398   Min.   :  398   Min.   :     1.0   LINESTRING   :153812  \n 1st Qu.: 5908   1st Qu.: 5880   1st Qu.:     4.0   epsg:3414    :     0  \n Median : 7753   Median : 7769   Median :    17.0   +proj=tmer...:     0  \n Mean   : 7655   Mean   : 7668   Mean   :   142.4                         \n 3rd Qu.: 9315   3rd Qu.: 9324   3rd Qu.:    69.0                         \n Max.   :13258   Max.   :13258   Max.   :135939.0                         \n```\n:::\n:::\n\nFrom the above, there is a significant leap between the 3rd quartile to the Maximum TOT_trips. As such, a percentile close to 100% should be chosen to minimise clutter in the geovisualisation of the O-D pairs with the busiest flow. Consequently, geovisualisation of the desire lines corresponding to the top 1 percentile of TOT_trips is thus chosen for analysis, as shown below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz) +\n  tm_polygons() +\ntm_shape(busstop_hxgn_grid_sf) +\n  tm_polygons() +\nflowLine %>%  \n  filter(TOT_TRIPS >= quantile(flowLine$TOT_TRIPS, 0.99)) %>%\ntm_shape() +\n  tm_lines(lwd = \"TOT_TRIPS\",\n           style = \"quantile\",\n           scale = c(0.1, 1, 3, 5, 7, 10),\n           n = 6,\n           alpha = 0.3) +\ntm_layout(main.title = \"Top 1% Busiest O-D flow During Weekday Evening Peak\",\n          main.title.position = \"center\",\n          main.title.size = 1.1,\n          legend.height = 0.4, \n          legend.width = 0.6,\n          frame = TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: The shape mpsz is invalid. See sf::st_is_valid\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in g$scale * (w_legend/maxW): longer object length is not a multiple of\nshorter object length\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in g$scale * (x/maxW): longer object length is not a multiple of\nshorter object length\n```\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex2_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\nA geovisualisation of the desire lines corresponding to the median +/- 0.5 percentile of TOT_TRIPS is as shown below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz) +\n  tm_polygons(alpha = 1, col = \"red\") +\ntm_shape(busstop_hxgn_grid_sf) +\n  tm_polygons(alpha = 1,col = \"white\") +\nflowLine %>%  \n  filter(TOT_TRIPS <= quantile(flowLine$TOT_TRIPS, 0.505),TOT_TRIPS >= quantile(flowLine$TOT_TRIPS, 0.495)) %>%\ntm_shape() +\n  tm_lines(lwd = \"TOT_TRIPS\",\n           style = \"quantile\",\n           scale = c(0.1, 1, 3, 5, 7, 10),\n           n = 6,\n           alpha = 0.1,\n           col = \"darkblue\") +\ntm_layout(main.title = \"Median +/- 0.5 percentile of Busiest O-D flow During Weekday Evening Peak\",\n          main.title.position = \"center\",\n          main.title.size = 1.1,\n          legend.height = 0.4, \n          legend.width = 0.6,\n          frame = TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: The shape mpsz is invalid. See sf::st_is_valid\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in g$scale * (w_legend/maxW): longer object length is not a multiple of\nshorter object length\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in g$scale * (x/maxW): longer object length is not a multiple of\nshorter object length\n```\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex2_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\nA geovisualisation of the desire lines corresponding to bottom 1 percentile of TOT_TRIPS is as shown below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz) +\n  tm_polygons(alpha = 1, col = \"red\") +\ntm_shape(busstop_hxgn_grid_sf) +\n  tm_polygons(alpha = 1,col = \"white\") +\nflowLine %>%  \n  filter(TOT_TRIPS <= quantile(flowLine$TOT_TRIPS, 0.01)) %>%\ntm_shape() +\n  tm_lines(lwd = \"TOT_TRIPS\",\n           style = \"quantile\",\n           scale = c(0.1, 1, 3, 5, 7, 10),\n           n = 6,\n           alpha = 0.05,\n           col = \"darkblue\") +\ntm_layout(main.title = \"Bottom 1 percentile of Busiest O-D flow During Weekday Evening Peak\",\n          main.title.position = \"center\",\n          main.title.size = 1.1,\n          legend.height = 0.4, \n          legend.width = 0.6,\n          frame = TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: The shape mpsz is invalid. See sf::st_is_valid\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in g$scale * (x/maxW): longer object length is not a multiple of\nshorter object length\n```\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex2_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\n### Analysis of O-D flow Geovisualisation\n\n### Identification of Propulsive and Attractiveness Variables\n\n### Computation of Distance Matrix\n\nFirst as.Spatial() function of sp package will be used to convert hxgn_grid_sf from sf tibble data frame to SpatialPolygonsDataFrame (ie sp object) as follows.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbusstop_hxgn_grid_sp <- as(busstop_hxgn_grid_sf, \"Spatial\")\nbusstop_hxgn_grid_sp\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nclass       : SpatialPolygonsDataFrame \nfeatures    : 5144 \nextent      : 3605.038, 48605.04, 26249.28, 50064.98  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 2\nnames       : BUS_STOP_N, grid_id \nmin values  :      01012,     398 \nmax values  :      99189,   13258 \n```\n:::\n:::\n\n\nNext, spDists() of sp package is used to compute the Euclidean distance between the centroids of the hexagonal grid as follows.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndist <- spDists(busstop_hxgn_grid_sp, \n                longlat = FALSE)\nhead(dist, n=c(10, 10))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]\n [1,]    0.0000  992.1567 2704.1635 3333.0729  992.1567 2459.0394 2250.0000\n [2,]  992.1567    0.0000 1948.5572 2598.0762  375.0000 1634.5871 1352.0817\n [3,] 2704.1635 1948.5572    0.0000  649.5191 2281.0359  375.0000  750.0000\n [4,] 3333.0729 2598.0762  649.5191    0.0000 2928.8436  992.1567 1352.0817\n [5,]  992.1567  375.0000 2281.0359 2928.8436    0.0000 1948.5572 1634.5871\n [6,] 2459.0394 1634.5871  375.0000  992.1567 1948.5572    0.0000  375.0000\n [7,] 2250.0000 1352.0817  750.0000 1352.0817 1634.5871  375.0000    0.0000\n [8,] 2250.0000 1352.0817  750.0000 1352.0817 1634.5871  375.0000    0.0000\n [9,] 4056.2452 3269.1742 1352.0817  750.0000 3577.2720 1634.5871 1948.5572\n[10,] 1634.5871  649.5191 1718.4659 2341.8742  750.0000 1352.0817  992.1567\n           [,8]     [,9]     [,10]\n [1,] 2250.0000 4056.245 1634.5871\n [2,] 1352.0817 3269.174  649.5191\n [3,]  750.0000 1352.082 1718.4659\n [4,] 1352.0817  750.000 2341.8742\n [5,] 1634.5871 3577.272  750.0000\n [6,]  375.0000 1634.587 1352.0817\n [7,]    0.0000 1948.557  992.1567\n [8,]    0.0000 1948.557  992.1567\n [9,] 1948.5572    0.000 2928.8436\n[10,]  992.1567 2928.844    0.0000\n```\n:::\n:::\n\n\nA list is then created, sorted according to the the distance matrix by hexagon grid id.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrid_names <- busstop_hxgn_grid_sp$grid_id\n```\n:::\n\n\nGrid_id is then attached to row and column for distance matrix matching ahead\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(dist) <- paste0(grid_names)\nrownames(dist) <- paste0(grid_names)\n```\n:::\n\n\nThe distance matrix is pivoted into a long table by using the row and column hexagon grid_id as follows.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndistPair <- melt(dist) %>%\n  rename(dist = value)\nhead(distPair, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Var1 Var2      dist\n1   398  398    0.0000\n2   615  398  992.1567\n3   618  398 2704.1635\n4   619  398 3333.0729\n5   668  398  992.1567\n6   671  398 2459.0394\n7   725  398 2250.0000\n8   725  398 2250.0000\n9   728  398 4056.2452\n10  777  398 1634.5871\n```\n:::\n:::\n\n\nFiltering only the non-0 distance pair to exclude intra-grid commutes and using summary(), the minimum value of the distance is obtained as follows.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndistPair %>%\n  filter(dist > 0) %>%\n  summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      Var1            Var2            dist      \n Min.   :  398   Min.   :  398   Min.   :  375  \n 1st Qu.: 5057   1st Qu.: 5057   1st Qu.: 7803  \n Median : 7379   Median : 7379   Median :12667  \n Mean   : 7063   Mean   : 7063   Mean   :13309  \n 3rd Qu.: 9161   3rd Qu.: 9161   3rd Qu.:17863  \n Max.   :13258   Max.   :13258   Max.   :44927  \n```\n:::\n:::\n\n\nAn arbitrary small distance value of 0.1m is used to replace existing intra-zonal distance of 0.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndistPair$dist <- ifelse(distPair$dist == 0,\n                        0.1, distPair$dist)\n```\n:::\n\n\nUsing summary() once more, the resultant data.frame is inspected if further wrangling is required, as follows.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndistPair %>%\n  summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      Var1            Var2            dist        \n Min.   :  398   Min.   :  398   Min.   :    0.1  \n 1st Qu.: 5057   1st Qu.: 5057   1st Qu.: 7803.2  \n Median : 7379   Median : 7379   Median :12667.0  \n Mean   : 7063   Mean   : 7063   Mean   :13301.0  \n 3rd Qu.: 9161   3rd Qu.: 9161   3rd Qu.:17862.8  \n Max.   :13258   Max.   :13258   Max.   :44926.5  \n```\n:::\n:::\n\n\nFor clarity, the origin and destination fields are renamed as follows.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndistPair <- distPair %>%\n  rename(orig = Var1,\n         dest = Var2)\n```\n:::\n\n\nLastly, the prepared O-D distance matrix in long form is saved as follows.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(distPair, \"data/rds/distPair.rds\") \n```\n:::\n\n\n## Objective (2): Spatial Interaction Modelling for O-D Flows of Passengers During Weekday Evening Peakhour\n\n### Formulating Spatial Interaction Models\n\n#### Preparing Flow Data & O-D attributes\n\nSeparate the intra-grid flow and from the rest of the flow data within the data.frame, and  add three new fields in flow_data dataframe.\n\nflow_data$FlowNoIntra <- ifelse(\n  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, \n  0, flow_data$TRIPS)\nflow_data$offset <- ifelse(\n  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, \n  0.000001, 1)\n\n#### Calibrating Spatial Interaction Models\n\n### Geovisualisation and Graphical Plots of Spatial Interaction Models\n\n### Analysis of Spatial Interaction Modelling Results\n\n\n\n\n\n\n",
    "supporting": [
      "Take-home_Ex2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}