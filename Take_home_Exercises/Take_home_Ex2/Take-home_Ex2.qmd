---
title: "Take-home_Ex2"
author: "Low Ji Xiong"
---


## Introduction

The success of Singapore's public transport is commonly recognised as 1 of the quintessential indicator of its rapid growth and prosperity since her independence in 1965. It comprises of both public buses as well as mass rapid transport (MRT) trains. While the MRT network has been expanding across the many zones within Singapore, the bus network remains the most option accessible and reliable option amongst the two.

Thus, the utilisation pattern of buses are of key importance to multiple aspects of Singapore's socio-economic spheres, ranging from areas of work productivity and efficiency, environmental impact, tourism, and even to potential impact to cost of living and real estate development; which underpins the impetus of this exercise to gain a better understanding of the utilisation patterns and characteristics of Singapore's bus stops.

## Objectives

The key objectives of this exercise are:

-   To perform geovisualisation and analysis of Origin-Destination flows of passenger trips
-   To perform Spatial Interaction Modelling for Origin-Destination flows of passenger trips

## Getting Started

The code chunk below load the following packages:

-   tmap: for thematic mapping
-   sf: for simple feature geospatial data handling
-   sp: for spatial polygon geospatial data handling
-   tidyverse: for non-spatial data handling.
-   knitr: for creating html table
-   reshape2: for reshaping functions
-   stplanr:
-   spdep:
-   sfdep: for creating an sf and tidyverse friendly interface as well as for introducing new functionality that is not present in spdep
-   plotly: for interactive plots

```{r}
pacman::p_load(tmap, sf, sp, tidyverse, knitr,  reshape2, stplanr, performance, DT, ggpubr) 
```

## Importing and preparing the Base Geospatial and Aspatial Data

### Aspatial data

Firstly, the data set *Passenger Volume by Origin Destination Bus Stops* for the month of October 2023 from LTA DataMall, will be imported by using 'read_csv()' of \*\*readr\* package.

```{r}
odbus <- read.csv("data/aspatial/origin_destination_bus_202310.csv")
```

Glimpse function is then used to discover the data type of the variables in the dataset. 

```{r}
glimpse(odbus)
```
From above, the values in ORIGIN_PT_CODE and DESTINATON_PT_CODE in the odbus tibble data frame are in numeric data type.

Using appropriate tidyverse functions, these data values will be  converted into factor data type.

```{r}
odbus$ORIGIN_PT_CODE <- as.factor(odbus$ORIGIN_PT_CODE)
odbus$DESTINATION_PT_CODE <- as.factor(odbus$DESTINATION_PT_CODE)
```

Using Glimpse once more to check, the values in ORIGIN_PT_CODE and DESTINATON_PT_CODE odbus in the tibble data frame are now in factor data type, as below.

```{r}
glimpse(odbus)
```

### Geospatial data

The geospatial data for BusStop downloaded from LTA DataMall into RStudio is then imported and saved as a sf data frame named busstop. Projected coordinate system is selected, which tends to be more accurate for distance measurement.

```{r}
busstop <- st_read(dsn = "data/geospatial",
                   layer = "BusStop") %>%
  st_transform(crs = 3414)
```

Using the glimpse() function, the structure of busstop sf tibble data frame is as follows.

```{R}
glimpse(busstop)
```

The geospatial data for the Singapore Master Plan Subzone 2019 data downloaded from data.gov.sg is also imported and saved as a sf data frame named mpsz, similarly in projected coordinate system.

```{R}
mpsz <- st_read(dsn = "data/geospatial",layer ="MPSZ-2019") %>%
  st_transform(crs = 3414)
```
### Preparing Hexagonal Grid for Traffic Analysis Zone (TAZ)

Creating hexagonal grid in sf format with grid_id as follows. 

```{R}
hxgn_grid = st_make_grid(mpsz, c(375, 375), what = "polygons", square = FALSE)

# To sf and add grid ID
hxgn_grid_sf = st_sf(hxgn_grid) %>%
  mutate(grid_id = 1:length(lengths(hxgn_grid)))
hxgn_grid_sf$grid_id <- as.factor(hxgn_grid_sf$grid_id)
```
In the above, the hexagonal grid size chosen to be 375m by 375m is based on the assumption that the maximum willingness of an average commuter to walk being 375m*2 which is 750m. 

Imported busstop data is merged with Hexagonal grid as follows.

```{R}
busstop_hxgn_grid <- st_intersection(busstop, hxgn_grid_sf) %>%
  select(BUS_STOP_N, grid_id) %>%
  st_drop_geometry()
```

Check for BUS_STOP_N with duplicate grid_id is then performed as follows.

```{R}
check_duplicate <- busstop_hxgn_grid %>%
  group_by(BUS_STOP_N) %>%
  summarise(num_grid_id = n_distinct(grid_id))
```
From the resultant table in the code above, out of 5,144 busstops, 4 intercept across 2 grid_id.

Hence, for this exercise, to avoid double counting of trips subsequently, the duplicate grid_id for the 4 busstops are removed.

```{R}
busstop_hxgn_grid <- distinct(busstop_hxgn_grid, BUS_STOP_N, .keep_all = TRUE)
```

busstop_hxgn_grid data is re-merged with sf tibble data and converted to sf object class for subsequent geo-visualisation of hexagon grid for all busstops in Singapore, named as busstop_hxgn_grid_sf.

```{R}
busstop_hxgn_grid_sf <- left_join(busstop_hxgn_grid, 
                           hxgn_grid_sf,
                           by = c("grid_id" = "grid_id"))%>%
  select(grid_id, hxgn_grid) %>%
  st_sf()

busstop_hxgn_grid_sf <- unique(busstop_hxgn_grid_sf)

tm_shape(mpsz) +
  tm_polygons() +
tm_shape(busstop_hxgn_grid_sf) + 
  tm_polygons(col = "red")
  
```

### Extracting the passenger trips for Weekday Evening Peakhour

For the purpose of this exercise, extract commuting flows during weekday evening peak and label the output tibble data table as odbus_wkd17_20.

```{r}
odbus_wkd17_20 <- odbus %>%
  filter(DAY_TYPE == "WEEKDAY") %>%
  filter(TIME_PER_HOUR >= 17 &
           TIME_PER_HOUR <= 20) %>%
  group_by(ORIGIN_PT_CODE,
           DESTINATION_PT_CODE) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))
```

The tible data sets is converted and saved in rds format and imported back into R as follows.

```{R}
write_rds(odbus_wkd17_20, "data/rds/odbus_wkd17_20.rds")
odbus_wkd17_20 <- read_rds("data/rds/odbus_wkd17_20.rds")
```

### Merging Weekday Evening Peakhour Passenger Trips with Geospatial data

The merged busstop_hxgn_grid frame is then appended onto odbus_wkd17_20 data frame as follows.

```{R}
wkd17_20_hxgn_grid <- left_join(odbus_wkd17_20, busstop_hxgn_grid, 
            by = c("ORIGIN_PT_CODE" = "BUS_STOP_N")) %>%
  rename(ORIGIN_BS = ORIGIN_PT_CODE,
         ORIGIN_GRID = grid_id,
         DESTIN_BS = DESTINATION_PT_CODE)
```

As a good practice, check for duplicate records and retain duplicate records as follows.

```{R}
check_duplicate1 <- wkd17_20_hxgn_grid %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()

wkd17_20_hxgn_grid <- unique(wkd17_20_hxgn_grid)
```

Repeat the same steps to obtain the DESTIN_GRID by joining with busstop_hxgn_grid once more as follows

```{R}
wkd17_20_hxgn_grid <- left_join(wkd17_20_hxgn_grid, busstop_hxgn_grid, 
            by = c("DESTIN_BS" = "BUS_STOP_N"))
```


```{R}
check_duplicate2 <- wkd17_20_hxgn_grid %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()

wkd17_20_hxgn_grid <- unique(wkd17_20_hxgn_grid)
```

For this analysis, the trips are summed across multiple bus stops within each Hexagon grid, as follows.

```{R}
wkd17_20_hxgn_grid <- wkd17_20_hxgn_grid%>%
  rename(DESTIN_GRID = grid_id) %>%
  drop_na() %>%
  group_by(ORIGIN_GRID, DESTIN_GRID) %>%
  summarise(TOT_TRIPS = sum(TRIPS))
```
The output will be saved as an rds file format and imported back into R as follows.

```{R}
write_rds(wkd17_20_hxgn_grid, "data/rds/wkd17_20_hxgn_grid.rds")
wkd17_20_hxgn_grid <- read_rds("data/rds/wkd17_20_hxgn_grid.rds")
```

## Objective (1): Geovisualisation and Analysis of O-D flow of Passengers during Weekday Evening Peakhour

### Geovisualisation of O-D flow

#### Plotting Origin & Destination Points

In order to plot the origin points, the O-D Grid data is merged with hexagon grid simple feature tibble data and filtered as follows.

```{R}
#| eval: false
wkd17_20_hxgn_grid_O_sf <- left_join(hxgn_grid_sf, 
                           wkd17_20_hxgn_grid,
                           by = c("grid_id" = "ORIGIN_GRID"))%>%
  group_by(grid_id) %>%
  summarise(TOT_TRIPS = sum(TOT_TRIPS))

wkd17_20_hxgn_grid_O_sf = filter(wkd17_20_hxgn_grid_O_sf, TOT_TRIPS > 0)
write_rds(wkd17_20_hxgn_grid_O_sf, "data/rds/wkd17_20_hxgn_grid_O_sf.rds")
```


```{R}
wkd17_20_hxgn_grid_O_sf  <- read_rds("data/rds/wkd17_20_hxgn_grid_O_sf.rds")
```

Similarly, to plot the destination points, the O-D Grid data is merged with hexagon grid simple feature tibble data and filtered as follows.

```{R}
#| eval: false
wkd17_20_hxgn_grid_D_sf <- left_join(hxgn_grid_sf, 
                           wkd17_20_hxgn_grid,
                           by = c("grid_id" = "DESTIN_GRID"))%>%
  group_by(grid_id) %>%
  summarise(TOT_TRIPS = sum(TOT_TRIPS))

wkd17_20_hxgn_grid_D_sf = filter(wkd17_20_hxgn_grid_D_sf, TOT_TRIPS > 0)
write_rds(wkd17_20_hxgn_grid_D_sf, "data/rds/wkd17_20_hxgn_grid_D_sf.rds ")
```

```{R}
wkd17_20_hxgn_grid_D_sf  <- read_rds("data/rds/wkd17_20_hxgn_grid_D_sf.rds")
```

The distribution of Origin & Destination points in the map are as follows.

```{R}
tmap_mode("plot")
tmap_options(check.and.fix = TRUE)

tm_shape(mpsz) +
  tm_polygons() +
tm_shape(wkd17_20_hxgn_grid_O_sf) +
  tm_fill(
    col = c("TOT_TRIPS"),
    palette = "Blues",
    style = "quantile",
    title = c("Total Passenger Trips from Origin Pt"),
    id = "grid_id",
    showNA = FALSE,
    alpha = 0.9,
    popup.vars = c(
      "Total Trips: " = "TOT_TRIPS"
    ),
    popup.format = list(
      TOT_TRIPS = list(format = "f", digits = 0)
    )
  ) +
  tm_layout(main.title = "Origin Pt BusStop Passenger Trips During Weekday Evening Peak",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5)


tm_shape(mpsz) +
  tm_polygons() +
tm_shape(wkd17_20_hxgn_grid_D_sf) +
  tm_fill(
    col = c("TOT_TRIPS"),
    palette = "Reds",
    style = "quantile",
    title = c("Total Passenger Trips to Destination Pt"),
    id = "grid_id",
    showNA = FALSE,
    alpha = 0.9,
    popup.vars = c(
      "Total Trips: " = "TOT_TRIPS"
    ),
    popup.format = list(
      TOT_TRIPS = list(format = "f", digits = 0)
    )
  ) +
  tm_layout(main.title = "Destination Pt BusStop Passenger Trips During Weekday Evening Peak",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5)
```

#### Plotting Desire lines

First the Intra-zonal flow is removed, to scope the analysis to more substantial distance of travel. Data points with Origin points same as Destination points will hence be excluded as follows.

```{R}
wkd17_20_hxgn_grid_dl <- wkd17_20_hxgn_grid[wkd17_20_hxgn_grid$ORIGIN_GRID!=wkd17_20_hxgn_grid$DESTIN_GRID,]
```

Using od2line() function of stplanr package, the data for the desire lines are created in hexagonal grid as follows.

```{R}
flowLine <- od2line(flow = wkd17_20_hxgn_grid_dl, 
                    zones = hxgn_grid_sf,
                    zone_code = "grid_id")
```

To determine the appropriate ranges for a meaningful geovisualisation of the O-D desire lines, the summary statistic for the flowline is obtained as follows.

```{R}
summary(flowLine)
```
From the above, there is a significant leap between the 3rd quartile to the Maximum TOT_trips. As such, a percentile close to 100% should be chosen to minimise clutter in the geovisualisation of the O-D pairs with the busiest flow. Consequently, geovisualisation of the desire lines corresponding to the top 1 percentile of TOT_trips is thus chosen for analysis, as shown below.

```{R}
tm_shape(mpsz) +
  tm_polygons() +
tm_shape(busstop_hxgn_grid_sf) +
  tm_polygons() +
flowLine %>%  
  filter(TOT_TRIPS >= quantile(flowLine$TOT_TRIPS, 0.99)) %>%
tm_shape() +
  tm_lines(lwd = "TOT_TRIPS",
           style = "quantile",
           scale = c(0.1, 1, 3, 5, 7, 10),
           n = 6,
           alpha = 0.3,
           col = "blue") +
tm_layout(main.title = "Top 1% Busiest O-D flow During Weekday Evening Peak",
          main.title.position = "center",
          main.title.size = 1.1,
          legend.height = 0.4, 
          legend.width = 0.6,
          frame = TRUE)
```

A geovisualisation of the desire lines corresponding to the median +/- 0.5 percentile of TOT_TRIPS is as shown below.

```{R}
tm_shape(mpsz) +
  tm_polygons(alpha = 1, col = "red") +
tm_shape(busstop_hxgn_grid_sf) +
  tm_polygons(alpha = 1,col = "white") +
flowLine %>%  
  filter(TOT_TRIPS <= quantile(flowLine$TOT_TRIPS, 0.505),TOT_TRIPS >= quantile(flowLine$TOT_TRIPS, 0.495)) %>%
tm_shape() +
  tm_lines(lwd = "TOT_TRIPS",
           style = "quantile",
           scale = c(0.1, 1, 3, 5, 7, 10),
           n = 6,
           alpha = 0.1,
           col = "darkblue") +
tm_layout(main.title = "Median +/- 0.5 percentile of Busiest O-D flow During Weekday Evening Peak",
          main.title.position = "center",
          main.title.size = 1.1,
          legend.height = 0.4, 
          legend.width = 0.6,
          frame = TRUE)
```

A geovisualisation of the desire lines corresponding to bottom 1 percentile of TOT_TRIPS is as shown below.

```{R}
tm_shape(mpsz) +
  tm_polygons(alpha = 1, col = "red") +
tm_shape(busstop_hxgn_grid_sf) +
  tm_polygons(alpha = 1,col = "white") +
flowLine %>%  
  filter(TOT_TRIPS <= quantile(flowLine$TOT_TRIPS, 0.01)) %>%
tm_shape() +
  tm_lines(lwd = "TOT_TRIPS",
           style = "quantile",
           scale = c(0.1, 1, 3, 5, 7, 10),
           n = 6,
           alpha = 0.05,
           col = "darkblue") +
tm_layout(main.title = "Bottom 1 percentile of Busiest O-D flow During Weekday Evening Peak",
          main.title.position = "center",
          main.title.size = 1.1,
          legend.height = 0.4, 
          legend.width = 0.6,
          frame = TRUE)
```

### Analysis of O-D flow Geovisualisation

From the comparison of the plots of Origin points against Destination points, it can be observed that the spread of distribution became more concentrated on a relatively smaller bus stops from Origin to Destination.

From the Busiest 1% of O-D flow lines, it can be observed that the busiest O-D flow lines were involved the bus interchanges. In particular, woodlands interchange and bus stops at the causeway were notably the busiest, where the larger majority of these O-D pairs were with the bus stops in Eastern Singapore- Tampines and Pasir Ris bus interchange, while a smaller majority were with bus stops in Northwestern Singapore in the Choa chu kang interchange. In Western Singapore, the busier flow lines centred around Boon lay followed by Jurong east districts, with shorter trips within the same district. In Eastern Singapore the busier flow lines centred around Bedok and Tampines districts, where trips tended to be from the northern sectors like woodlands or Sengkang districts. In central Singapore, the busier flow lines were centred around the Bishan and Ang Mo Kio districts.

The median busy O-D flow lines were generally distributed within the central and eastern Singapore, whereas the least busy O-D flow lines are evenly spread across all districts of Singapore.

### Identification of Propulsive and Attractiveness Variables

During the Weekday Evening Peak hour, it is expected that majority of the commuters in Singapore would be ending work, and would likely be either going home, or visiting retail and F&B locations. However, since the timing stretches across 3 hours from 1700h to 2000h, it is also possible that a significant portion might also be making a second trip within the time span. Based on this, the following are likely Propulsive and Attractiveness variables:

- Propulsive Variables-
  - **Count of Businesses within Polygon** to consider the workplace of a significant proportion of the population
  - **Count of Residential dwelling units within Polygon** to consider a significant proportion of the population working or studying from home
  - **Count of Financial Services within Polygon** to consider the workplace of a significant proportion of the population

- Attractiveness Variables-
  - **Count of Retail Services within Polygon** to consider the post-work activity a significant proportion of the population
  - **Count of F&B count within Polygon** to consider dinner time within that time period
  - **Count of Residential dwelling units within Polygon** to consider a significant proportion of the population returning home after school, work or post-work activity


### Computation of Distance Matrix

First as.Spatial() function of sp package will be used to convert hxgn_grid_sf from sf tibble data frame to SpatialPolygonsDataFrame (ie sf to sp object class) to utilise other functions within sp package subsequently to compute the O-D distance matrix as follows.

```{R}
busstop_hxgn_grid_sp <- as(busstop_hxgn_grid_sf, "Spatial")
busstop_hxgn_grid_sp
```

Next, spDists() of sp package is used to compute the Euclidean distance between the centroids of the hexagonal grid as follows.

```{R}
dist <- spDists(busstop_hxgn_grid_sp, 
                longlat = FALSE)
head(dist, n=c(10, 10))
```
To represent the above O-D distance matrix in a data.frame, a list is created with the hexagon grid_id, sorted according to the distance matrix, and represented as factor data type as follows.

```{R}
grid_names <- busstop_hxgn_grid_sp$grid_id
```

Grid_id is then attached to row and column for distance matrix matching ahead

```{R}
colnames(dist) <- paste0(grid_names)
rownames(dist) <- paste0(grid_names)
```

The distance matrix is pivoted into a long table by using the row and column hexagon grid_id as follows.

```{R}
distPair <- melt(dist) %>%
  rename(dist = value)
head(distPair, 10)
```

Filtering only the non-0 distance pair to exclude intra-grid commutes and using summary(), the minimum value of the distance is obtained as follows.

```{R}
distPair %>%
  filter(dist > 0) %>%
  summary()
```

An arbitrary small distance value of 0.1m is used to replace existing intra-zonal distance of 0.

```{R}
distPair$dist <- ifelse(distPair$dist == 0,
                        0.1, distPair$dist)
```

Using summary() once more, the resultant data.frame is inspected if further wrangling is required, as follows.

```{R}
distPair %>%
  summary()
```

For clarity and subsequent analysis, the origin and destination fields are renamed and converted to Factor data type as follows.

```{R}
distPair <- distPair %>%
  rename(orig = Var1,
         dest = Var2)
distPair$orig <- as.factor(distPair$orig)
distPair$dest <- as.factor(distPair$dest)
```

Duplicates are then removed as follows.

```{R}
distPair <- unique(distPair)
```

Lastly, the prepared O-D distance matrix in long form is saved as a rds file as follows.

```{R}
write_rds(distPair, "data/rds/distPair.rds") 
```

## Objective (2): Spatial Interaction Modelling for O-D Flows of Passengers During Weekday Evening Peakhour

### Formulating Spatial Interaction Models

#### Preparing the Base Flow Data

In preparation for the modelling, the intra-grid flow is separated from the rest of the flow data in the flow data.frame (ie wkd17-20_hxgn_grid), and  an offset column is created for subsequent data wrangling with the addition of 2 new columns as follows.

```{R}
flowdata <- wkd17_20_hxgn_grid
flowdata$FlowNoIntra <- ifelse(
  flowdata$ORIGIN_GRID == flowdata$DESTIN_GRID, 
  0, flowdata$TOT_TRIPS)
```

inter-zonal flow will be selected from flow_data and save into a new output data.frame called inter_zonal_flow by using the code chunk below.

```{R}
flowdata <- flowdata %>%
  filter(FlowNoIntra > 0)
```

Before joining flowdata and distPair, data value type of ORIGIN_GRID and DESTIN_GRID variables of flowdata dataframe is converted into factor data type.

```{R}
flowdata$ORIGIN_GRID <- as.factor(flowdata$ORIGIN_GRID)
flowdata$DESTIN_GRID <- as.factor(flowdata$DESTIN_GRID)
```

Using left_join() of dplyr, flowdata dataframe and distPair dataframe will be merged, with the output being named flow_data.

```{R}
flow_data <- flowdata %>%
  left_join (distPair,
             by = c("ORIGIN_GRID" = "orig",
                    "DESTIN_GRID" = "dest")) %>%
  select(ORIGIN_GRID, DESTIN_GRID, TOT_TRIPS, dist)
```

#### Preparing the O-D attributes from Propulsive & Attractiveness Variables

##### Origin Attributes based on Propulsive Variables

An intermediary data set for Propulsive variables that relate to the origin attributes is created for subsequent wrangling and merger into the base flow data.

```{R}
var_prop <- busstop_hxgn_grid_sf
```

###### Business & Financial Services

Import & inspect the Businesses and Financial Services Geopatial data sets, provided as part of Take-home Exercise data files.

```{R}
biz_sf = st_read(dsn = "data/geospatial", layer = "Business")%>%
st_transform(crs = 3414)

finserv_sf = st_read(dsn = "data/geospatial", layer = "FinServ")%>%
st_transform(crs = 3414)

tm_shape(mpsz) +
  tm_polygons() +
  tm_shape(biz_sf) +
  tm_dots(col = "blue")

tm_shape(mpsz) +
  tm_polygons() +
  tm_shape(finserv_sf) +
  tm_dots(col = "red")
```

Add count of Businesses and Financial Services to the interim data set for propulsive variables

```{R}
var_prop$O_Biz_count <- lengths(st_intersects(var_prop, biz_sf))
var_prop$O_Finserv_count <- lengths(st_intersects(var_prop, finserv_sf))
```

###### Residential HDB Dwelling Units

Import and inspect the HDB Aspatial data set, provided as part of Take-home Exercise data files.

```{R}
hdb <- read_csv("data/aspatial/hdb.csv")
glimpse(hdb)
```

Formulate the sf data from the longitutde and latitude variables for each row, filter for residential HDB blocks and inspect the distribution of residential HDB blocks.

```{R}
hdb_sf <- hdb %>% 
  st_as_sf(coords = c("lng", "lat"), crs = 4326) %>%
  st_transform(crs = 3414) %>%
  filter(residential == "Y")

tm_shape(mpsz) +
  tm_polygons() +
  tm_shape(hdb_sf) +
  tm_dots(col = "blue")
```

Derive the data set for the count of residential HDB dwelling units for each grid and merge the count into the interim propulsive variables data set (ie var_prop).

```{R}
hdb_dwelling_count <- st_intersection(hdb_sf, var_prop) %>%
      select(total_dwelling_units, grid_id) %>%
      st_drop_geometry()%>%
      group_by(grid_id) %>%
      summarise(O_hdb_dwelling_count = sum(total_dwelling_units))

var_prop <- var_prop %>%
  left_join(hdb_dwelling_count,
             by = c("grid_id" = "grid_id"))%>%
  st_drop_geometry()

glimpse(var_prop)

```

```{R}
var_prop <- unique(var_prop)
```

##### Destination Attributesbased on Attractiveness Variables

An intermediary data set for Attractiveness variables that relate to the origin attributes is created for subsequent wrangling and merger into the base flow data.

```{R}
var_att <- busstop_hxgn_grid_sf
```

###### F&B & Retail Services

Import & inspect the Food & Beverage (F&B) and Retail Services Geopatial data sets, provided as part of Take-home Exercise data files.

```{R}
FB_sf = st_read(dsn = "data/geospatial", layer = "F&B")%>%
st_transform(crs = 3414)

Retail_sf = st_read(dsn = "data/geospatial", layer = "Retails")%>%
st_transform(crs = 3414)

tm_shape(mpsz) +
  tm_polygons() +
  tm_shape(FB_sf) +
  tm_dots(col = "blue")

tm_shape(mpsz) +
  tm_polygons() +
  tm_shape(Retail_sf) +
  tm_dots(col = "red")
```

Add count of Food & Beverage (F&B) and Retail Services to the interim data set for Attractiveness variables

```{R}
var_att$D_FB_count <- lengths(st_intersects(var_att, FB_sf))
var_att$D_Retail_count <- lengths(st_intersects(var_att, Retail_sf))
```

###### Residential HDB Dwelling Units

Similarly, merge the count of residential HDB dwelling units for each grid into the interim Attractiveness variables data set (ie var_att).

```{R}
var_att <- var_att %>%
  left_join(hdb_dwelling_count,
             by = c("grid_id" = "grid_id")) %>%
  rename(D_hdb_dwelling_count = O_hdb_dwelling_count)%>%
  st_drop_geometry()

glimpse(var_att)

```

#### Preparation and Combining O-D Attributes with flow data

Merging O-D attributes with base flow data

```{R}
flow_data <- flow_data %>%
  left_join(var_prop,
             by = c("ORIGIN_GRID" = "grid_id"))

flow_data <- flow_data %>%
  left_join(var_att,
             by = c("DESTIN_GRID" = "grid_id"))

summary(flow_data)

```
The print report above reveals that variables O_Biz_count, O_Finserv_count, D_FB_count, D_Retail_count, consist of 0 values, while O_hdb_dwelling_count and D_hdb_dwelling_count consist of NA values. These values will impede the subsequent modelling and analysis of the O-D attributes

As such, the zero and NA values will be replaced with a value of 0.1 as follows.

```{R}
flow_data$O_Biz_count <- ifelse(
  flow_data$O_Biz_count == 0,
  0.1, flow_data$O_Biz_count)
flow_data$O_Finserv_count <- ifelse(
  flow_data$O_Finserv_count == 0,
  0.1, flow_data$O_Finserv_count)
flow_data$D_FB_count <- ifelse(
  flow_data$D_FB_count == 0,
  0.1, flow_data$D_FB_count)
flow_data$D_Retail_count <- ifelse(
  flow_data$D_Retail_count == 0,
  0.1, flow_data$D_Retail_count)
  
  
flow_data$O_hdb_dwelling_count <- ifelse(is.na(flow_data$O_hdb_dwelling_count), 0.1, flow_data$O_hdb_dwelling_count)
flow_data$D_hdb_dwelling_count <- ifelse(is.na(flow_data$D_hdb_dwelling_count), 0.1, flow_data$D_hdb_dwelling_count)

summary(flow_data)
```
From the above, there are no longer 0 or NA values, and as such the flow data is saved as an rds file follows.

```{R}
write_rds(flow_data,
          "data/rds/flow_data_tidy.rds")
```

#### Calibrating Spatial Interaction Models

##### Unconstrained Spatial Interaction Models

The general formula of Unconstrained Spatial Interaction Model is:

**lambda_ij = exp(k + mu ln V_i + alpha ln W_j - Beta ln d_ij)**

Using the glm() function, the results applying the abovementioned formula is obtained as follows.

```{R}
#| eval: false
uncSIM <- glm(formula = TOT_TRIPS ~ 
                log(O_Biz_count) + 
                log(O_Finserv_count) +
                log(O_hdb_dwelling_count) +
                log(D_FB_count) +
                log(D_Retail_count) +
                log(D_hdb_dwelling_count) +
                log(dist),
              family = poisson(link = "log"),
              data = flow_data,
              na.action = na.exclude)
write_rds(uncSIM, "data/rds/uncSIM.rds")
```

```{R}
uncSIM <- read_rds("data/rds/uncSIM.rds")
kable(tail(uncSIM$coefficients, n = 7))
```

##### Origin Constrained Spatial Interaction Models

The general formula of Unconstrained Spatial Interaction Model is:

**lambda_ij = exp(k + mu + alpha ln W_j - Beta ln d_ij)**

Using the glm() function, the results applying the abovementioned formula is obtained as follows.

```{R}
#| eval: false
orcSIM <- glm(formula = TOT_TRIPS ~ 
                 ORIGIN_GRID + 
                log(D_FB_count) +
                log(D_Retail_count) +
                log(D_hdb_dwelling_count) +
                log(dist),
              family = poisson(link = "log"),
              data = flow_data,
              na.action = na.exclude)
write_rds(orcSIM, "data/rds/orcSIM.rds")
```


```{R}
orcSIM <- read_rds("data/rds/orcSIM.rds")
kable(tail(orcSIM$coefficients, n=4))
```

##### Destination Constrained Spatial Interaction Models

The general formula of Unconstrained Spatial Interaction Model is:

**lambda_ij = exp(k + mu ln V_i + alpha_i - Beta ln d_ij)**

Using the glm() function, the results applying the abovementioned formula is obtained as follows.

```{R}
#| eval: false
decSIM <- glm(formula = TOT_TRIPS ~ 
                DESTIN_GRID + 
                log(O_Biz_count) + 
                log(O_Finserv_count) +
                log(O_hdb_dwelling_count) +
                log(dist),
              family = poisson(link = "log"),
              data = flow_data,
              na.action = na.exclude)
write_rds(decSIM, "data/rds/decSIM.rds")
```

```{R}
decSIM <- read_rds("data/rds/decSIM.rds")
kable(tail(decSIM$coefficients, n=4))
```

##### Doubly Constrained Spatial Interaction Models

The general formula of Unconstrained Spatial Interaction Model is:

**lambda_ij = exp(k + mu_i + alpha_i - Beta ln d_ij)**

Using the glm() function, the results applying the above-mentioned formula is obtained as follows.

```{R}
#| eval: false
dbcSIM <- glm(formula = TOT_TRIPS ~ 
                ORIGIN_GRID + 
                DESTIN_GRID +  
                log(O_Biz_count) + 
                log(O_Finserv_count) +
                log(O_hdb_dwelling_count) +
                log(D_FB_count) +
                log(D_Retail_count) +
                log(D_hdb_dwelling_count) +
                log(dist),
              family = poisson(link = "log"),
              data = flow_data,
              na.action = na.exclude)
write_rds(dbcSIM, "data/rds/dbcSIM.rds")
```

```{R}
dbcSIM <- read_rds("data/rds/dbcSIM.rds")
kable(tail(dbcSIM$coefficients, n=1))
```

##### Model Comparison

As a means for comparison of the accuracy of each of the four models, the Root Mean Squared Error (RMSE) can be used to determine the margin of error between the predicted and actual values for each model, for which the lower the error, the more accurate the model is.

To perform a comparison across the 4 models, a list of the models is first compiled as follows.

```{R}
model_list <- list(unconstrained=uncSIM,
                   originConstrained=orcSIM,
                   destinationConstrained=decSIM,
                   doublyConstrained=dbcSIM)
```

Using the compare_performance() of performance package, the RMSE for the 4 models is computed as follows.

```{R}
compare_performance(model_list,
                    metrics = "RMSE")
```

In addition to RMSE, a comparison of the R-squared value of each model can also reveal the proportion of the dependent value (ie TOT_TRIPS) that can be accounted for using each model, for which the higher the R-squared value, the more accurate the model.

A function is first defined to derive the R-squared value as follows.

```{R}
CalcRSquared <- function(observed,estimated){
  r <- cor(observed,estimated)
  R2 <- r^2
  R2
}
```

The results are computed and tabulated for the 4 models in a data frame as follows.

```{R}
data.frame(
  Method = c("Unconstrained", "Origin Constrained", "Destination Constrained", "Doubly Constrained"),
  R_squared = c(CalcRSquared(uncSIM$data$TOT_TRIPS, uncSIM$fitted.values), 
                CalcRSquared(orcSIM$data$TOT_TRIPS, orcSIM$fitted.values), 
                CalcRSquared(decSIM$data$TOT_TRIPS, decSIM$fitted.values), 
                CalcRSquared(dbcSIM$data$TOT_TRIPS, dbcSIM$fitted.values))
)
```

### Geovisualisation and Graphical Plots of Spatial Interaction Models

To plot the actual values against the predicted values for each of the 4 models, the fitted values from each model is first extracted, and then appended and renamed in the earlier flow data set as follows.

```{R}
df <- as.data.frame(uncSIM$fitted.values) %>%
  round(digits = 0)
flow_data <- flow_data %>%
  cbind(df) %>%
  rename(uncTRIPS = "uncSIM$fitted.values")

df <- as.data.frame(orcSIM$fitted.values) %>%
  round(digits = 0)
flow_data <- flow_data %>%
  cbind(df) %>%
  rename(orcTRIPS = "orcSIM$fitted.values")

df <- as.data.frame(decSIM$fitted.values) %>%
  round(digits = 0)
flow_data <- flow_data %>%
  cbind(df) %>%
  rename(decTRIPS = "decSIM$fitted.values")

df <- as.data.frame(dbcSIM$fitted.values) %>%
  round(digits = 0)
flow_data <- flow_data %>%
  cbind(df) %>%
  rename(dbcTRIPS = "dbcSIM$fitted.values")
```

Using ggplot(), the selected variables in the flow data set is then plotted as follows.

```{R}
unc_p <- ggplot(data = flow_data,
                aes(x = uncTRIPS,
                    y = TOT_TRIPS)) +
  geom_point() +
  geom_smooth(method = lm)

orc_p <- ggplot(data = flow_data,
                aes(x = orcTRIPS,
                    y = TOT_TRIPS)) +
  geom_point() +
  geom_smooth(method = lm)

dec_p <- ggplot(data = flow_data,
                aes(x = decTRIPS,
                    y = TOT_TRIPS)) +
  geom_point() +
  geom_smooth(method = lm)

dbc_p <- ggplot(data = flow_data,
                aes(x = dbcTRIPS,
                    y = TOT_TRIPS)) +
  geom_point() +
  geom_smooth(method = lm)

ggarrange(unc_p, orc_p, dec_p, dbc_p,
          ncol = 2,
          nrow = 2)
```

### Analysis of Spatial Interaction Modelling Results

Based on the results comparing the four models, it can be observed that the doubly constrained model was the most accurate model in terms or RMSE and R-squared values, which is congruent with the graphical plot which shows that the data points are relatively closest to the best fit line. This is followed by the origin constrained and destination constrained, and lastly unconstrained. 

Across the 3 models (excluding doubly constrained), the coefficient for financial service count reflected as consistently positive and having the highest magnitude, as a propulsive factor. Hence the results strongly suggest that the count of fincancial services within an area is a strong predictor for the start of a bus trip during the weekday evening peak. The other 2 propulsive variables tend to be less consistent, and may even fall to negative coefficients in some model(s).

For Attractiveness variables, the strongest predictor was the count of residential HDB blocks, for which though smaller in magnitude the coefficient remained positive across the 3 models. The other 2 variables were not too far off but fell negative in some model(s) as well.

The analysis done in this exercise seems to suggests that there could be other factors that propels or attracts commuters taking bus trips, or perhaps the patterns may not be well-described in the 4 models utilised, and hence more data collection and verification, as well as a wider variety of models can be employed to improve the prediction of O-D flows on public buses during Weekday Evening Peak hour.





